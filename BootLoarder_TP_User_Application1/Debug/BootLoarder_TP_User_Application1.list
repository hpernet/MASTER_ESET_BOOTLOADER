
BootLoarder_TP_User_Application1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001344  080081c4  080081c4  000081c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08009508  08009508  00009508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800959c  0800959c  00010068  2**0
                  CONTENTS
  4 .ARM          00000000  0800959c  0800959c  00010068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800959c  0800959c  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800959c  0800959c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095a0  080095a0  000095a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080095a4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  0800960c  00010068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800960c  0001009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003bd7  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000eb5  00000000  00000000  00013c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000458  00000000  00000000  00014b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00014f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002192b  00000000  00000000  00015330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005288  00000000  00000000  00036c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8682  00000000  00000000  0003bee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00104565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001598  00000000  00000000  001045b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081c4 <__do_global_dtors_aux>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	4c05      	ldr	r4, [pc, #20]	; (80081dc <__do_global_dtors_aux+0x18>)
 80081c8:	7823      	ldrb	r3, [r4, #0]
 80081ca:	b933      	cbnz	r3, 80081da <__do_global_dtors_aux+0x16>
 80081cc:	4b04      	ldr	r3, [pc, #16]	; (80081e0 <__do_global_dtors_aux+0x1c>)
 80081ce:	b113      	cbz	r3, 80081d6 <__do_global_dtors_aux+0x12>
 80081d0:	4804      	ldr	r0, [pc, #16]	; (80081e4 <__do_global_dtors_aux+0x20>)
 80081d2:	f3af 8000 	nop.w
 80081d6:	2301      	movs	r3, #1
 80081d8:	7023      	strb	r3, [r4, #0]
 80081da:	bd10      	pop	{r4, pc}
 80081dc:	20000068 	.word	0x20000068
 80081e0:	00000000 	.word	0x00000000
 80081e4:	080094f0 	.word	0x080094f0

080081e8 <frame_dummy>:
 80081e8:	b508      	push	{r3, lr}
 80081ea:	4b03      	ldr	r3, [pc, #12]	; (80081f8 <frame_dummy+0x10>)
 80081ec:	b11b      	cbz	r3, 80081f6 <frame_dummy+0xe>
 80081ee:	4903      	ldr	r1, [pc, #12]	; (80081fc <frame_dummy+0x14>)
 80081f0:	4803      	ldr	r0, [pc, #12]	; (8008200 <frame_dummy+0x18>)
 80081f2:	f3af 8000 	nop.w
 80081f6:	bd08      	pop	{r3, pc}
 80081f8:	00000000 	.word	0x00000000
 80081fc:	2000006c 	.word	0x2000006c
 8008200:	080094f0 	.word	0x080094f0

08008204 <GPIO_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800820a:	1d3b      	adds	r3, r7, #4
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	605a      	str	r2, [r3, #4]
 8008212:	609a      	str	r2, [r3, #8]
 8008214:	60da      	str	r2, [r3, #12]
 8008216:	611a      	str	r2, [r3, #16]

	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8008218:	4b14      	ldr	r3, [pc, #80]	; (800826c <GPIO_Init+0x68>)
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	4a13      	ldr	r2, [pc, #76]	; (800826c <GPIO_Init+0x68>)
 800821e:	f043 0305 	orr.w	r3, r3, #5
 8008222:	6313      	str	r3, [r2, #48]	; 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 8008224:	4b12      	ldr	r3, [pc, #72]	; (8008270 <GPIO_Init+0x6c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a11      	ldr	r2, [pc, #68]	; (8008270 <GPIO_Init+0x6c>)
 800822a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800822e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 8008230:	4b10      	ldr	r3, [pc, #64]	; (8008274 <GPIO_Init+0x70>)
 8008232:	4a10      	ldr	r2, [pc, #64]	; (8008274 <GPIO_Init+0x70>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6013      	str	r3, [r2, #0]

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin  = GPIO_PIN_13;
 8008238:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800823c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800823e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008242:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008248:	1d3b      	adds	r3, r7, #4
 800824a:	4619      	mov	r1, r3
 800824c:	4809      	ldr	r0, [pc, #36]	; (8008274 <GPIO_Init+0x70>)
 800824e:	f000 fa67 	bl	8008720 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008252:	2200      	movs	r2, #0
 8008254:	2100      	movs	r1, #0
 8008256:	2028      	movs	r0, #40	; 0x28
 8008258:	f000 fa37 	bl	80086ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800825c:	2028      	movs	r0, #40	; 0x28
 800825e:	f000 fa50 	bl	8008702 <HAL_NVIC_EnableIRQ>
}
 8008262:	bf00      	nop
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	40023800 	.word	0x40023800
 8008270:	40020000 	.word	0x40020000
 8008274:	40020800 	.word	0x40020800

08008278 <__io_putchar>:
#include "gpio.h"
#include "usart.h"

// Private functions
int __io_putchar(int ch)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	while(((USART2->SR)&= (1<<7))==0);
 8008280:	bf00      	nop
 8008282:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <__io_putchar+0x30>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <__io_putchar+0x30>)
 8008288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0f7      	beq.n	8008282 <__io_putchar+0xa>
	USART2->DR = ch;
 8008292:	4a05      	ldr	r2, [pc, #20]	; (80082a8 <__io_putchar+0x30>)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6053      	str	r3, [r2, #4]
}
 8008298:	bf00      	nop
 800829a:	4618      	mov	r0, r3
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	40004400 	.word	0x40004400

080082ac <main>:

// Main
int main(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
	// Initialize peripherals
	GPIO_Init();
 80082b2:	f7ff ffa7 	bl	8008204 <GPIO_Init>
	USART2_Init();
 80082b6:	f000 f907 	bl	80084c8 <USART2_Init>

	// Infinite loop
	while(1)
	{
		for(uint32_t i = 0 ; i<50000; i++);
 80082ba:	2300      	movs	r3, #0
 80082bc:	607b      	str	r3, [r7, #4]
 80082be:	e002      	b.n	80082c6 <main+0x1a>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3301      	adds	r3, #1
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d9f7      	bls.n	80082c0 <main+0x14>
		GPIOA->ODR ^= 1<<5;
 80082d0:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <main+0x38>)
 80082d2:	695b      	ldr	r3, [r3, #20]
 80082d4:	4a03      	ldr	r2, [pc, #12]	; (80082e4 <main+0x38>)
 80082d6:	f083 0320 	eor.w	r3, r3, #32
 80082da:	6153      	str	r3, [r2, #20]
		printf("This is Application0\r\n");
 80082dc:	4802      	ldr	r0, [pc, #8]	; (80082e8 <main+0x3c>)
 80082de:	f000 fc77 	bl	8008bd0 <puts>
		for(uint32_t i = 0 ; i<50000; i++);
 80082e2:	e7ea      	b.n	80082ba <main+0xe>
 80082e4:	40020000 	.word	0x40020000
 80082e8:	08009508 	.word	0x08009508

080082ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082f0:	e7fe      	b.n	80082f0 <NMI_Handler+0x4>

080082f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082f2:	b480      	push	{r7}
 80082f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082f6:	e7fe      	b.n	80082f6 <HardFault_Handler+0x4>

080082f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082fc:	e7fe      	b.n	80082fc <MemManage_Handler+0x4>

080082fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082fe:	b480      	push	{r7}
 8008300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008302:	e7fe      	b.n	8008302 <BusFault_Handler+0x4>

08008304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008308:	e7fe      	b.n	8008308 <UsageFault_Handler+0x4>

0800830a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800830a:	b480      	push	{r7}
 800830c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800830e:	bf00      	nop
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008318:	b480      	push	{r7}
 800831a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800831c:	bf00      	nop
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008326:	b480      	push	{r7}
 8008328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800832a:	bf00      	nop
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008338:	f000 f92a 	bl	8008590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800833c:	bf00      	nop
 800833e:	bd80      	pop	{r7, pc}

08008340 <EXTI15_10_IRQHandler>:
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void EXTI15_10_IRQHandler(void)   // <----- The ISR Function We're Looking For!
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0
	printf("Push button pressed\r\n");
 8008344:	4804      	ldr	r0, [pc, #16]	; (8008358 <EXTI15_10_IRQHandler+0x18>)
 8008346:	f000 fc43 	bl	8008bd0 <puts>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800834a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800834e:	f000 fb7b 	bl	8008a48 <HAL_GPIO_EXTI_IRQHandler>
}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	08009520 	.word	0x08009520

0800835c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]
 800836c:	e00a      	b.n	8008384 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800836e:	f3af 8000 	nop.w
 8008372:	4601      	mov	r1, r0
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	60ba      	str	r2, [r7, #8]
 800837a:	b2ca      	uxtb	r2, r1
 800837c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	3301      	adds	r3, #1
 8008382:	617b      	str	r3, [r7, #20]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	dbf0      	blt.n	800836e <_read+0x12>
	}

return len;
 800838c:	687b      	ldr	r3, [r7, #4]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b086      	sub	sp, #24
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083a2:	2300      	movs	r3, #0
 80083a4:	617b      	str	r3, [r7, #20]
 80083a6:	e009      	b.n	80083bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	60ba      	str	r2, [r7, #8]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff ff61 	bl	8008278 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	3301      	adds	r3, #1
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	dbf1      	blt.n	80083a8 <_write+0x12>
	}
	return len;
 80083c4:	687b      	ldr	r3, [r7, #4]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <_close>:

int _close(int file)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b083      	sub	sp, #12
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
	return -1;
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80083da:	4618      	mov	r0, r3
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80083f6:	605a      	str	r2, [r3, #4]
	return 0;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <_isatty>:

int _isatty(int file)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
	return 1;
 800840e:	2301      	movs	r3, #1
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
	return 0;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
	...

08008438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008440:	4a14      	ldr	r2, [pc, #80]	; (8008494 <_sbrk+0x5c>)
 8008442:	4b15      	ldr	r3, [pc, #84]	; (8008498 <_sbrk+0x60>)
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800844c:	4b13      	ldr	r3, [pc, #76]	; (800849c <_sbrk+0x64>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008454:	4b11      	ldr	r3, [pc, #68]	; (800849c <_sbrk+0x64>)
 8008456:	4a12      	ldr	r2, [pc, #72]	; (80084a0 <_sbrk+0x68>)
 8008458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800845a:	4b10      	ldr	r3, [pc, #64]	; (800849c <_sbrk+0x64>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4413      	add	r3, r2
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	429a      	cmp	r2, r3
 8008466:	d207      	bcs.n	8008478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008468:	f000 fb12 	bl	8008a90 <__errno>
 800846c:	4603      	mov	r3, r0
 800846e:	220c      	movs	r2, #12
 8008470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008472:	f04f 33ff 	mov.w	r3, #4294967295
 8008476:	e009      	b.n	800848c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008478:	4b08      	ldr	r3, [pc, #32]	; (800849c <_sbrk+0x64>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800847e:	4b07      	ldr	r3, [pc, #28]	; (800849c <_sbrk+0x64>)
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4413      	add	r3, r2
 8008486:	4a05      	ldr	r2, [pc, #20]	; (800849c <_sbrk+0x64>)
 8008488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800848a:	68fb      	ldr	r3, [r7, #12]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20020000 	.word	0x20020000
 8008498:	00000400 	.word	0x00000400
 800849c:	20000084 	.word	0x20000084
 80084a0:	200000a0 	.word	0x200000a0

080084a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80084a8:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <SystemInit+0x20>)
 80084aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ae:	4a05      	ldr	r2, [pc, #20]	; (80084c4 <SystemInit+0x20>)
 80084b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80084b8:	bf00      	nop
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	e000ed00 	.word	0xe000ed00

080084c8 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 80084cc:	4b18      	ldr	r3, [pc, #96]	; (8008530 <USART2_Init+0x68>)
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	4a17      	ldr	r2, [pc, #92]	; (8008530 <USART2_Init+0x68>)
 80084d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084d6:	6413      	str	r3, [r2, #64]	; 0x40
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 80084d8:	4b16      	ldr	r3, [pc, #88]	; (8008534 <USART2_Init+0x6c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a15      	ldr	r2, [pc, #84]	; (8008534 <USART2_Init+0x6c>)
 80084de:	f043 0320 	orr.w	r3, r3, #32
 80084e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 80084e4:	4b13      	ldr	r3, [pc, #76]	; (8008534 <USART2_Init+0x6c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a12      	ldr	r2, [pc, #72]	; (8008534 <USART2_Init+0x6c>)
 80084ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ee:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 80084f0:	4b10      	ldr	r3, [pc, #64]	; (8008534 <USART2_Init+0x6c>)
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	4a0f      	ldr	r2, [pc, #60]	; (8008534 <USART2_Init+0x6c>)
 80084f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80084fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 80084fc:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <USART2_Init+0x6c>)
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	4a0c      	ldr	r2, [pc, #48]	; (8008534 <USART2_Init+0x6c>)
 8008502:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8008506:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 8008508:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <USART2_Init+0x70>)
 800850a:	228b      	movs	r2, #139	; 0x8b
 800850c:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 800850e:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <USART2_Init+0x70>)
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	4a09      	ldr	r2, [pc, #36]	; (8008538 <USART2_Init+0x70>)
 8008514:	f043 030c 	orr.w	r3, r3, #12
 8008518:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;
 800851a:	4b07      	ldr	r3, [pc, #28]	; (8008538 <USART2_Init+0x70>)
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	4a06      	ldr	r2, [pc, #24]	; (8008538 <USART2_Init+0x70>)
 8008520:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008524:	60d3      	str	r3, [r2, #12]
}
 8008526:	bf00      	nop
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	40023800 	.word	0x40023800
 8008534:	40020000 	.word	0x40020000
 8008538:	40004400 	.word	0x40004400

0800853c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800853c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008574 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008540:	480d      	ldr	r0, [pc, #52]	; (8008578 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008542:	490e      	ldr	r1, [pc, #56]	; (800857c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008544:	4a0e      	ldr	r2, [pc, #56]	; (8008580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008548:	e002      	b.n	8008550 <LoopCopyDataInit>

0800854a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800854a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800854c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800854e:	3304      	adds	r3, #4

08008550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008554:	d3f9      	bcc.n	800854a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008556:	4a0b      	ldr	r2, [pc, #44]	; (8008584 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008558:	4c0b      	ldr	r4, [pc, #44]	; (8008588 <LoopFillZerobss+0x26>)
  movs r3, #0
 800855a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800855c:	e001      	b.n	8008562 <LoopFillZerobss>

0800855e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800855e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008560:	3204      	adds	r2, #4

08008562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008564:	d3fb      	bcc.n	800855e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008566:	f7ff ff9d 	bl	80084a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800856a:	f000 fa97 	bl	8008a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800856e:	f7ff fe9d 	bl	80082ac <main>
  bx  lr    
 8008572:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008574:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800857c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8008580:	080095a4 	.word	0x080095a4
  ldr r2, =_sbss
 8008584:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8008588:	2000009c 	.word	0x2000009c

0800858c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800858c:	e7fe      	b.n	800858c <ADC_IRQHandler>
	...

08008590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008594:	4b06      	ldr	r3, [pc, #24]	; (80085b0 <HAL_IncTick+0x20>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	461a      	mov	r2, r3
 800859a:	4b06      	ldr	r3, [pc, #24]	; (80085b4 <HAL_IncTick+0x24>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4413      	add	r3, r2
 80085a0:	4a04      	ldr	r2, [pc, #16]	; (80085b4 <HAL_IncTick+0x24>)
 80085a2:	6013      	str	r3, [r2, #0]
}
 80085a4:	bf00      	nop
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	20000000 	.word	0x20000000
 80085b4:	20000088 	.word	0x20000088

080085b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085b8:	b480      	push	{r7}
 80085ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085bc:	4b04      	ldr	r3, [pc, #16]	; (80085d0 <__NVIC_GetPriorityGrouping+0x18>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	0a1b      	lsrs	r3, r3, #8
 80085c2:	f003 0307 	and.w	r3, r3, #7
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	e000ed00 	.word	0xe000ed00

080085d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	4603      	mov	r3, r0
 80085dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	db0b      	blt.n	80085fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	f003 021f 	and.w	r2, r3, #31
 80085ec:	4907      	ldr	r1, [pc, #28]	; (800860c <__NVIC_EnableIRQ+0x38>)
 80085ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085f2:	095b      	lsrs	r3, r3, #5
 80085f4:	2001      	movs	r0, #1
 80085f6:	fa00 f202 	lsl.w	r2, r0, r2
 80085fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	e000e100 	.word	0xe000e100

08008610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800861c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008620:	2b00      	cmp	r3, #0
 8008622:	db0a      	blt.n	800863a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	b2da      	uxtb	r2, r3
 8008628:	490c      	ldr	r1, [pc, #48]	; (800865c <__NVIC_SetPriority+0x4c>)
 800862a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800862e:	0112      	lsls	r2, r2, #4
 8008630:	b2d2      	uxtb	r2, r2
 8008632:	440b      	add	r3, r1
 8008634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008638:	e00a      	b.n	8008650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	b2da      	uxtb	r2, r3
 800863e:	4908      	ldr	r1, [pc, #32]	; (8008660 <__NVIC_SetPriority+0x50>)
 8008640:	79fb      	ldrb	r3, [r7, #7]
 8008642:	f003 030f 	and.w	r3, r3, #15
 8008646:	3b04      	subs	r3, #4
 8008648:	0112      	lsls	r2, r2, #4
 800864a:	b2d2      	uxtb	r2, r2
 800864c:	440b      	add	r3, r1
 800864e:	761a      	strb	r2, [r3, #24]
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	e000e100 	.word	0xe000e100
 8008660:	e000ed00 	.word	0xe000ed00

08008664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008664:	b480      	push	{r7}
 8008666:	b089      	sub	sp, #36	; 0x24
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	f1c3 0307 	rsb	r3, r3, #7
 800867e:	2b04      	cmp	r3, #4
 8008680:	bf28      	it	cs
 8008682:	2304      	movcs	r3, #4
 8008684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	3304      	adds	r3, #4
 800868a:	2b06      	cmp	r3, #6
 800868c:	d902      	bls.n	8008694 <NVIC_EncodePriority+0x30>
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	3b03      	subs	r3, #3
 8008692:	e000      	b.n	8008696 <NVIC_EncodePriority+0x32>
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008698:	f04f 32ff 	mov.w	r2, #4294967295
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	fa02 f303 	lsl.w	r3, r2, r3
 80086a2:	43da      	mvns	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	401a      	ands	r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086ac:	f04f 31ff 	mov.w	r1, #4294967295
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	fa01 f303 	lsl.w	r3, r1, r3
 80086b6:	43d9      	mvns	r1, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086bc:	4313      	orrs	r3, r2
         );
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3724      	adds	r7, #36	; 0x24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b086      	sub	sp, #24
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	4603      	mov	r3, r0
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	607a      	str	r2, [r7, #4]
 80086d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80086d8:	2300      	movs	r3, #0
 80086da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80086dc:	f7ff ff6c 	bl	80085b8 <__NVIC_GetPriorityGrouping>
 80086e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	68b9      	ldr	r1, [r7, #8]
 80086e6:	6978      	ldr	r0, [r7, #20]
 80086e8:	f7ff ffbc 	bl	8008664 <NVIC_EncodePriority>
 80086ec:	4602      	mov	r2, r0
 80086ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086f2:	4611      	mov	r1, r2
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff ff8b 	bl	8008610 <__NVIC_SetPriority>
}
 80086fa:	bf00      	nop
 80086fc:	3718      	adds	r7, #24
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	4603      	mov	r3, r0
 800870a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800870c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008710:	4618      	mov	r0, r3
 8008712:	f7ff ff5f 	bl	80085d4 <__NVIC_EnableIRQ>
}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008720:	b480      	push	{r7}
 8008722:	b089      	sub	sp, #36	; 0x24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800872a:	2300      	movs	r3, #0
 800872c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800872e:	2300      	movs	r3, #0
 8008730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008732:	2300      	movs	r3, #0
 8008734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008736:	2300      	movs	r3, #0
 8008738:	61fb      	str	r3, [r7, #28]
 800873a:	e165      	b.n	8008a08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800873c:	2201      	movs	r2, #1
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	4013      	ands	r3, r2
 800874e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	429a      	cmp	r2, r3
 8008756:	f040 8154 	bne.w	8008a02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b01      	cmp	r3, #1
 8008764:	d005      	beq.n	8008772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800876e:	2b02      	cmp	r3, #2
 8008770:	d130      	bne.n	80087d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	005b      	lsls	r3, r3, #1
 800877c:	2203      	movs	r2, #3
 800877e:	fa02 f303 	lsl.w	r3, r2, r3
 8008782:	43db      	mvns	r3, r3
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	4013      	ands	r3, r2
 8008788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	fa02 f303 	lsl.w	r3, r2, r3
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	4313      	orrs	r3, r2
 800879a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	69ba      	ldr	r2, [r7, #24]
 80087a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80087a8:	2201      	movs	r2, #1
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	fa02 f303 	lsl.w	r3, r2, r3
 80087b0:	43db      	mvns	r3, r3
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	4013      	ands	r3, r2
 80087b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	091b      	lsrs	r3, r3, #4
 80087be:	f003 0201 	and.w	r2, r3, #1
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f003 0303 	and.w	r3, r3, #3
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d017      	beq.n	8008810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	2203      	movs	r2, #3
 80087ec:	fa02 f303 	lsl.w	r3, r2, r3
 80087f0:	43db      	mvns	r3, r3
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	4013      	ands	r3, r2
 80087f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	fa02 f303 	lsl.w	r3, r2, r3
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	4313      	orrs	r3, r2
 8008808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f003 0303 	and.w	r3, r3, #3
 8008818:	2b02      	cmp	r3, #2
 800881a:	d123      	bne.n	8008864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	08da      	lsrs	r2, r3, #3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3208      	adds	r2, #8
 8008824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f003 0307 	and.w	r3, r3, #7
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	220f      	movs	r2, #15
 8008834:	fa02 f303 	lsl.w	r3, r2, r3
 8008838:	43db      	mvns	r3, r3
 800883a:	69ba      	ldr	r2, [r7, #24]
 800883c:	4013      	ands	r3, r2
 800883e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	f003 0307 	and.w	r3, r3, #7
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	fa02 f303 	lsl.w	r3, r2, r3
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	4313      	orrs	r3, r2
 8008854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	08da      	lsrs	r2, r3, #3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	3208      	adds	r2, #8
 800885e:	69b9      	ldr	r1, [r7, #24]
 8008860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	005b      	lsls	r3, r3, #1
 800886e:	2203      	movs	r2, #3
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	43db      	mvns	r3, r3
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	4013      	ands	r3, r2
 800887a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f003 0203 	and.w	r2, r3, #3
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	005b      	lsls	r3, r3, #1
 8008888:	fa02 f303 	lsl.w	r3, r2, r3
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	4313      	orrs	r3, r2
 8008890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 80ae 	beq.w	8008a02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	4b5d      	ldr	r3, [pc, #372]	; (8008a20 <HAL_GPIO_Init+0x300>)
 80088ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ae:	4a5c      	ldr	r2, [pc, #368]	; (8008a20 <HAL_GPIO_Init+0x300>)
 80088b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b4:	6453      	str	r3, [r2, #68]	; 0x44
 80088b6:	4b5a      	ldr	r3, [pc, #360]	; (8008a20 <HAL_GPIO_Init+0x300>)
 80088b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80088c2:	4a58      	ldr	r2, [pc, #352]	; (8008a24 <HAL_GPIO_Init+0x304>)
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	089b      	lsrs	r3, r3, #2
 80088c8:	3302      	adds	r3, #2
 80088ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	f003 0303 	and.w	r3, r3, #3
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	220f      	movs	r2, #15
 80088da:	fa02 f303 	lsl.w	r3, r2, r3
 80088de:	43db      	mvns	r3, r3
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	4013      	ands	r3, r2
 80088e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a4f      	ldr	r2, [pc, #316]	; (8008a28 <HAL_GPIO_Init+0x308>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d025      	beq.n	800893a <HAL_GPIO_Init+0x21a>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a4e      	ldr	r2, [pc, #312]	; (8008a2c <HAL_GPIO_Init+0x30c>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d01f      	beq.n	8008936 <HAL_GPIO_Init+0x216>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a4d      	ldr	r2, [pc, #308]	; (8008a30 <HAL_GPIO_Init+0x310>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d019      	beq.n	8008932 <HAL_GPIO_Init+0x212>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a4c      	ldr	r2, [pc, #304]	; (8008a34 <HAL_GPIO_Init+0x314>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d013      	beq.n	800892e <HAL_GPIO_Init+0x20e>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a4b      	ldr	r2, [pc, #300]	; (8008a38 <HAL_GPIO_Init+0x318>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d00d      	beq.n	800892a <HAL_GPIO_Init+0x20a>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a4a      	ldr	r2, [pc, #296]	; (8008a3c <HAL_GPIO_Init+0x31c>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d007      	beq.n	8008926 <HAL_GPIO_Init+0x206>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a49      	ldr	r2, [pc, #292]	; (8008a40 <HAL_GPIO_Init+0x320>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d101      	bne.n	8008922 <HAL_GPIO_Init+0x202>
 800891e:	2306      	movs	r3, #6
 8008920:	e00c      	b.n	800893c <HAL_GPIO_Init+0x21c>
 8008922:	2307      	movs	r3, #7
 8008924:	e00a      	b.n	800893c <HAL_GPIO_Init+0x21c>
 8008926:	2305      	movs	r3, #5
 8008928:	e008      	b.n	800893c <HAL_GPIO_Init+0x21c>
 800892a:	2304      	movs	r3, #4
 800892c:	e006      	b.n	800893c <HAL_GPIO_Init+0x21c>
 800892e:	2303      	movs	r3, #3
 8008930:	e004      	b.n	800893c <HAL_GPIO_Init+0x21c>
 8008932:	2302      	movs	r3, #2
 8008934:	e002      	b.n	800893c <HAL_GPIO_Init+0x21c>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <HAL_GPIO_Init+0x21c>
 800893a:	2300      	movs	r3, #0
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	f002 0203 	and.w	r2, r2, #3
 8008942:	0092      	lsls	r2, r2, #2
 8008944:	4093      	lsls	r3, r2
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	4313      	orrs	r3, r2
 800894a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800894c:	4935      	ldr	r1, [pc, #212]	; (8008a24 <HAL_GPIO_Init+0x304>)
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	089b      	lsrs	r3, r3, #2
 8008952:	3302      	adds	r3, #2
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800895a:	4b3a      	ldr	r3, [pc, #232]	; (8008a44 <HAL_GPIO_Init+0x324>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	43db      	mvns	r3, r3
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	4013      	ands	r3, r2
 8008968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800897e:	4a31      	ldr	r2, [pc, #196]	; (8008a44 <HAL_GPIO_Init+0x324>)
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008984:	4b2f      	ldr	r3, [pc, #188]	; (8008a44 <HAL_GPIO_Init+0x324>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	43db      	mvns	r3, r3
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	4013      	ands	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80089a8:	4a26      	ldr	r2, [pc, #152]	; (8008a44 <HAL_GPIO_Init+0x324>)
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80089ae:	4b25      	ldr	r3, [pc, #148]	; (8008a44 <HAL_GPIO_Init+0x324>)
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	43db      	mvns	r3, r3
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	4013      	ands	r3, r2
 80089bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80089d2:	4a1c      	ldr	r2, [pc, #112]	; (8008a44 <HAL_GPIO_Init+0x324>)
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80089d8:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <HAL_GPIO_Init+0x324>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	43db      	mvns	r3, r3
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	4013      	ands	r3, r2
 80089e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80089fc:	4a11      	ldr	r2, [pc, #68]	; (8008a44 <HAL_GPIO_Init+0x324>)
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	3301      	adds	r3, #1
 8008a06:	61fb      	str	r3, [r7, #28]
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	f67f ae96 	bls.w	800873c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008a10:	bf00      	nop
 8008a12:	bf00      	nop
 8008a14:	3724      	adds	r7, #36	; 0x24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	40023800 	.word	0x40023800
 8008a24:	40013800 	.word	0x40013800
 8008a28:	40020000 	.word	0x40020000
 8008a2c:	40020400 	.word	0x40020400
 8008a30:	40020800 	.word	0x40020800
 8008a34:	40020c00 	.word	0x40020c00
 8008a38:	40021000 	.word	0x40021000
 8008a3c:	40021400 	.word	0x40021400
 8008a40:	40021800 	.word	0x40021800
 8008a44:	40013c00 	.word	0x40013c00

08008a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008a52:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a54:	695a      	ldr	r2, [r3, #20]
 8008a56:	88fb      	ldrh	r3, [r7, #6]
 8008a58:	4013      	ands	r3, r2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d006      	beq.n	8008a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a5e:	4a05      	ldr	r2, [pc, #20]	; (8008a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008a60:	88fb      	ldrh	r3, [r7, #6]
 8008a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a64:	88fb      	ldrh	r3, [r7, #6]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 f806 	bl	8008a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	40013c00 	.word	0x40013c00

08008a78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008a82:	bf00      	nop
 8008a84:	370c      	adds	r7, #12
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
	...

08008a90 <__errno>:
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <__errno+0x8>)
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000004 	.word	0x20000004

08008a9c <__libc_init_array>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4d0d      	ldr	r5, [pc, #52]	; (8008ad4 <__libc_init_array+0x38>)
 8008aa0:	4c0d      	ldr	r4, [pc, #52]	; (8008ad8 <__libc_init_array+0x3c>)
 8008aa2:	1b64      	subs	r4, r4, r5
 8008aa4:	10a4      	asrs	r4, r4, #2
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	42a6      	cmp	r6, r4
 8008aaa:	d109      	bne.n	8008ac0 <__libc_init_array+0x24>
 8008aac:	4d0b      	ldr	r5, [pc, #44]	; (8008adc <__libc_init_array+0x40>)
 8008aae:	4c0c      	ldr	r4, [pc, #48]	; (8008ae0 <__libc_init_array+0x44>)
 8008ab0:	f000 fd1e 	bl	80094f0 <_init>
 8008ab4:	1b64      	subs	r4, r4, r5
 8008ab6:	10a4      	asrs	r4, r4, #2
 8008ab8:	2600      	movs	r6, #0
 8008aba:	42a6      	cmp	r6, r4
 8008abc:	d105      	bne.n	8008aca <__libc_init_array+0x2e>
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac4:	4798      	blx	r3
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	e7ee      	b.n	8008aa8 <__libc_init_array+0xc>
 8008aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ace:	4798      	blx	r3
 8008ad0:	3601      	adds	r6, #1
 8008ad2:	e7f2      	b.n	8008aba <__libc_init_array+0x1e>
 8008ad4:	0800959c 	.word	0x0800959c
 8008ad8:	0800959c 	.word	0x0800959c
 8008adc:	0800959c 	.word	0x0800959c
 8008ae0:	080095a0 	.word	0x080095a0

08008ae4 <memset>:
 8008ae4:	4402      	add	r2, r0
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d100      	bne.n	8008aee <memset+0xa>
 8008aec:	4770      	bx	lr
 8008aee:	f803 1b01 	strb.w	r1, [r3], #1
 8008af2:	e7f9      	b.n	8008ae8 <memset+0x4>

08008af4 <_puts_r>:
 8008af4:	b570      	push	{r4, r5, r6, lr}
 8008af6:	460e      	mov	r6, r1
 8008af8:	4605      	mov	r5, r0
 8008afa:	b118      	cbz	r0, 8008b04 <_puts_r+0x10>
 8008afc:	6983      	ldr	r3, [r0, #24]
 8008afe:	b90b      	cbnz	r3, 8008b04 <_puts_r+0x10>
 8008b00:	f000 fa48 	bl	8008f94 <__sinit>
 8008b04:	69ab      	ldr	r3, [r5, #24]
 8008b06:	68ac      	ldr	r4, [r5, #8]
 8008b08:	b913      	cbnz	r3, 8008b10 <_puts_r+0x1c>
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f000 fa42 	bl	8008f94 <__sinit>
 8008b10:	4b2c      	ldr	r3, [pc, #176]	; (8008bc4 <_puts_r+0xd0>)
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d120      	bne.n	8008b58 <_puts_r+0x64>
 8008b16:	686c      	ldr	r4, [r5, #4]
 8008b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b1a:	07db      	lsls	r3, r3, #31
 8008b1c:	d405      	bmi.n	8008b2a <_puts_r+0x36>
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	0598      	lsls	r0, r3, #22
 8008b22:	d402      	bmi.n	8008b2a <_puts_r+0x36>
 8008b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b26:	f000 fad3 	bl	80090d0 <__retarget_lock_acquire_recursive>
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	0719      	lsls	r1, r3, #28
 8008b2e:	d51d      	bpl.n	8008b6c <_puts_r+0x78>
 8008b30:	6923      	ldr	r3, [r4, #16]
 8008b32:	b1db      	cbz	r3, 8008b6c <_puts_r+0x78>
 8008b34:	3e01      	subs	r6, #1
 8008b36:	68a3      	ldr	r3, [r4, #8]
 8008b38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	60a3      	str	r3, [r4, #8]
 8008b40:	bb39      	cbnz	r1, 8008b92 <_puts_r+0x9e>
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	da38      	bge.n	8008bb8 <_puts_r+0xc4>
 8008b46:	4622      	mov	r2, r4
 8008b48:	210a      	movs	r1, #10
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 f848 	bl	8008be0 <__swbuf_r>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d011      	beq.n	8008b78 <_puts_r+0x84>
 8008b54:	250a      	movs	r5, #10
 8008b56:	e011      	b.n	8008b7c <_puts_r+0x88>
 8008b58:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <_puts_r+0xd4>)
 8008b5a:	429c      	cmp	r4, r3
 8008b5c:	d101      	bne.n	8008b62 <_puts_r+0x6e>
 8008b5e:	68ac      	ldr	r4, [r5, #8]
 8008b60:	e7da      	b.n	8008b18 <_puts_r+0x24>
 8008b62:	4b1a      	ldr	r3, [pc, #104]	; (8008bcc <_puts_r+0xd8>)
 8008b64:	429c      	cmp	r4, r3
 8008b66:	bf08      	it	eq
 8008b68:	68ec      	ldreq	r4, [r5, #12]
 8008b6a:	e7d5      	b.n	8008b18 <_puts_r+0x24>
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4628      	mov	r0, r5
 8008b70:	f000 f888 	bl	8008c84 <__swsetup_r>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d0dd      	beq.n	8008b34 <_puts_r+0x40>
 8008b78:	f04f 35ff 	mov.w	r5, #4294967295
 8008b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b7e:	07da      	lsls	r2, r3, #31
 8008b80:	d405      	bmi.n	8008b8e <_puts_r+0x9a>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	059b      	lsls	r3, r3, #22
 8008b86:	d402      	bmi.n	8008b8e <_puts_r+0x9a>
 8008b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b8a:	f000 faa2 	bl	80090d2 <__retarget_lock_release_recursive>
 8008b8e:	4628      	mov	r0, r5
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	da04      	bge.n	8008ba0 <_puts_r+0xac>
 8008b96:	69a2      	ldr	r2, [r4, #24]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	dc06      	bgt.n	8008baa <_puts_r+0xb6>
 8008b9c:	290a      	cmp	r1, #10
 8008b9e:	d004      	beq.n	8008baa <_puts_r+0xb6>
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	6022      	str	r2, [r4, #0]
 8008ba6:	7019      	strb	r1, [r3, #0]
 8008ba8:	e7c5      	b.n	8008b36 <_puts_r+0x42>
 8008baa:	4622      	mov	r2, r4
 8008bac:	4628      	mov	r0, r5
 8008bae:	f000 f817 	bl	8008be0 <__swbuf_r>
 8008bb2:	3001      	adds	r0, #1
 8008bb4:	d1bf      	bne.n	8008b36 <_puts_r+0x42>
 8008bb6:	e7df      	b.n	8008b78 <_puts_r+0x84>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	250a      	movs	r5, #10
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	6022      	str	r2, [r4, #0]
 8008bc0:	701d      	strb	r5, [r3, #0]
 8008bc2:	e7db      	b.n	8008b7c <_puts_r+0x88>
 8008bc4:	0800955c 	.word	0x0800955c
 8008bc8:	0800957c 	.word	0x0800957c
 8008bcc:	0800953c 	.word	0x0800953c

08008bd0 <puts>:
 8008bd0:	4b02      	ldr	r3, [pc, #8]	; (8008bdc <puts+0xc>)
 8008bd2:	4601      	mov	r1, r0
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	f7ff bf8d 	b.w	8008af4 <_puts_r>
 8008bda:	bf00      	nop
 8008bdc:	20000004 	.word	0x20000004

08008be0 <__swbuf_r>:
 8008be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be2:	460e      	mov	r6, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	4605      	mov	r5, r0
 8008be8:	b118      	cbz	r0, 8008bf2 <__swbuf_r+0x12>
 8008bea:	6983      	ldr	r3, [r0, #24]
 8008bec:	b90b      	cbnz	r3, 8008bf2 <__swbuf_r+0x12>
 8008bee:	f000 f9d1 	bl	8008f94 <__sinit>
 8008bf2:	4b21      	ldr	r3, [pc, #132]	; (8008c78 <__swbuf_r+0x98>)
 8008bf4:	429c      	cmp	r4, r3
 8008bf6:	d12b      	bne.n	8008c50 <__swbuf_r+0x70>
 8008bf8:	686c      	ldr	r4, [r5, #4]
 8008bfa:	69a3      	ldr	r3, [r4, #24]
 8008bfc:	60a3      	str	r3, [r4, #8]
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	071a      	lsls	r2, r3, #28
 8008c02:	d52f      	bpl.n	8008c64 <__swbuf_r+0x84>
 8008c04:	6923      	ldr	r3, [r4, #16]
 8008c06:	b36b      	cbz	r3, 8008c64 <__swbuf_r+0x84>
 8008c08:	6923      	ldr	r3, [r4, #16]
 8008c0a:	6820      	ldr	r0, [r4, #0]
 8008c0c:	1ac0      	subs	r0, r0, r3
 8008c0e:	6963      	ldr	r3, [r4, #20]
 8008c10:	b2f6      	uxtb	r6, r6
 8008c12:	4283      	cmp	r3, r0
 8008c14:	4637      	mov	r7, r6
 8008c16:	dc04      	bgt.n	8008c22 <__swbuf_r+0x42>
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f000 f926 	bl	8008e6c <_fflush_r>
 8008c20:	bb30      	cbnz	r0, 8008c70 <__swbuf_r+0x90>
 8008c22:	68a3      	ldr	r3, [r4, #8]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	60a3      	str	r3, [r4, #8]
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	6022      	str	r2, [r4, #0]
 8008c2e:	701e      	strb	r6, [r3, #0]
 8008c30:	6963      	ldr	r3, [r4, #20]
 8008c32:	3001      	adds	r0, #1
 8008c34:	4283      	cmp	r3, r0
 8008c36:	d004      	beq.n	8008c42 <__swbuf_r+0x62>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	07db      	lsls	r3, r3, #31
 8008c3c:	d506      	bpl.n	8008c4c <__swbuf_r+0x6c>
 8008c3e:	2e0a      	cmp	r6, #10
 8008c40:	d104      	bne.n	8008c4c <__swbuf_r+0x6c>
 8008c42:	4621      	mov	r1, r4
 8008c44:	4628      	mov	r0, r5
 8008c46:	f000 f911 	bl	8008e6c <_fflush_r>
 8008c4a:	b988      	cbnz	r0, 8008c70 <__swbuf_r+0x90>
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c50:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <__swbuf_r+0x9c>)
 8008c52:	429c      	cmp	r4, r3
 8008c54:	d101      	bne.n	8008c5a <__swbuf_r+0x7a>
 8008c56:	68ac      	ldr	r4, [r5, #8]
 8008c58:	e7cf      	b.n	8008bfa <__swbuf_r+0x1a>
 8008c5a:	4b09      	ldr	r3, [pc, #36]	; (8008c80 <__swbuf_r+0xa0>)
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	bf08      	it	eq
 8008c60:	68ec      	ldreq	r4, [r5, #12]
 8008c62:	e7ca      	b.n	8008bfa <__swbuf_r+0x1a>
 8008c64:	4621      	mov	r1, r4
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 f80c 	bl	8008c84 <__swsetup_r>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d0cb      	beq.n	8008c08 <__swbuf_r+0x28>
 8008c70:	f04f 37ff 	mov.w	r7, #4294967295
 8008c74:	e7ea      	b.n	8008c4c <__swbuf_r+0x6c>
 8008c76:	bf00      	nop
 8008c78:	0800955c 	.word	0x0800955c
 8008c7c:	0800957c 	.word	0x0800957c
 8008c80:	0800953c 	.word	0x0800953c

08008c84 <__swsetup_r>:
 8008c84:	4b32      	ldr	r3, [pc, #200]	; (8008d50 <__swsetup_r+0xcc>)
 8008c86:	b570      	push	{r4, r5, r6, lr}
 8008c88:	681d      	ldr	r5, [r3, #0]
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	b125      	cbz	r5, 8008c9a <__swsetup_r+0x16>
 8008c90:	69ab      	ldr	r3, [r5, #24]
 8008c92:	b913      	cbnz	r3, 8008c9a <__swsetup_r+0x16>
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 f97d 	bl	8008f94 <__sinit>
 8008c9a:	4b2e      	ldr	r3, [pc, #184]	; (8008d54 <__swsetup_r+0xd0>)
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	d10f      	bne.n	8008cc0 <__swsetup_r+0x3c>
 8008ca0:	686c      	ldr	r4, [r5, #4]
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ca8:	0719      	lsls	r1, r3, #28
 8008caa:	d42c      	bmi.n	8008d06 <__swsetup_r+0x82>
 8008cac:	06dd      	lsls	r5, r3, #27
 8008cae:	d411      	bmi.n	8008cd4 <__swsetup_r+0x50>
 8008cb0:	2309      	movs	r3, #9
 8008cb2:	6033      	str	r3, [r6, #0]
 8008cb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cb8:	81a3      	strh	r3, [r4, #12]
 8008cba:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbe:	e03e      	b.n	8008d3e <__swsetup_r+0xba>
 8008cc0:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <__swsetup_r+0xd4>)
 8008cc2:	429c      	cmp	r4, r3
 8008cc4:	d101      	bne.n	8008cca <__swsetup_r+0x46>
 8008cc6:	68ac      	ldr	r4, [r5, #8]
 8008cc8:	e7eb      	b.n	8008ca2 <__swsetup_r+0x1e>
 8008cca:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <__swsetup_r+0xd8>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	bf08      	it	eq
 8008cd0:	68ec      	ldreq	r4, [r5, #12]
 8008cd2:	e7e6      	b.n	8008ca2 <__swsetup_r+0x1e>
 8008cd4:	0758      	lsls	r0, r3, #29
 8008cd6:	d512      	bpl.n	8008cfe <__swsetup_r+0x7a>
 8008cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cda:	b141      	cbz	r1, 8008cee <__swsetup_r+0x6a>
 8008cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	d002      	beq.n	8008cea <__swsetup_r+0x66>
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f000 fa5b 	bl	80091a0 <_free_r>
 8008cea:	2300      	movs	r3, #0
 8008cec:	6363      	str	r3, [r4, #52]	; 0x34
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	f043 0308 	orr.w	r3, r3, #8
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	6923      	ldr	r3, [r4, #16]
 8008d08:	b94b      	cbnz	r3, 8008d1e <__swsetup_r+0x9a>
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d14:	d003      	beq.n	8008d1e <__swsetup_r+0x9a>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f000 fa01 	bl	8009120 <__smakebuf_r>
 8008d1e:	89a0      	ldrh	r0, [r4, #12]
 8008d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d24:	f010 0301 	ands.w	r3, r0, #1
 8008d28:	d00a      	beq.n	8008d40 <__swsetup_r+0xbc>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60a3      	str	r3, [r4, #8]
 8008d2e:	6963      	ldr	r3, [r4, #20]
 8008d30:	425b      	negs	r3, r3
 8008d32:	61a3      	str	r3, [r4, #24]
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	b943      	cbnz	r3, 8008d4a <__swsetup_r+0xc6>
 8008d38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d3c:	d1ba      	bne.n	8008cb4 <__swsetup_r+0x30>
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
 8008d40:	0781      	lsls	r1, r0, #30
 8008d42:	bf58      	it	pl
 8008d44:	6963      	ldrpl	r3, [r4, #20]
 8008d46:	60a3      	str	r3, [r4, #8]
 8008d48:	e7f4      	b.n	8008d34 <__swsetup_r+0xb0>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e7f7      	b.n	8008d3e <__swsetup_r+0xba>
 8008d4e:	bf00      	nop
 8008d50:	20000004 	.word	0x20000004
 8008d54:	0800955c 	.word	0x0800955c
 8008d58:	0800957c 	.word	0x0800957c
 8008d5c:	0800953c 	.word	0x0800953c

08008d60 <__sflush_r>:
 8008d60:	898a      	ldrh	r2, [r1, #12]
 8008d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d66:	4605      	mov	r5, r0
 8008d68:	0710      	lsls	r0, r2, #28
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	d458      	bmi.n	8008e20 <__sflush_r+0xc0>
 8008d6e:	684b      	ldr	r3, [r1, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	dc05      	bgt.n	8008d80 <__sflush_r+0x20>
 8008d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dc02      	bgt.n	8008d80 <__sflush_r+0x20>
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	d0f9      	beq.n	8008d7a <__sflush_r+0x1a>
 8008d86:	2300      	movs	r3, #0
 8008d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d8c:	682f      	ldr	r7, [r5, #0]
 8008d8e:	602b      	str	r3, [r5, #0]
 8008d90:	d032      	beq.n	8008df8 <__sflush_r+0x98>
 8008d92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	075a      	lsls	r2, r3, #29
 8008d98:	d505      	bpl.n	8008da6 <__sflush_r+0x46>
 8008d9a:	6863      	ldr	r3, [r4, #4]
 8008d9c:	1ac0      	subs	r0, r0, r3
 8008d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008da0:	b10b      	cbz	r3, 8008da6 <__sflush_r+0x46>
 8008da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008da4:	1ac0      	subs	r0, r0, r3
 8008da6:	2300      	movs	r3, #0
 8008da8:	4602      	mov	r2, r0
 8008daa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dac:	6a21      	ldr	r1, [r4, #32]
 8008dae:	4628      	mov	r0, r5
 8008db0:	47b0      	blx	r6
 8008db2:	1c43      	adds	r3, r0, #1
 8008db4:	89a3      	ldrh	r3, [r4, #12]
 8008db6:	d106      	bne.n	8008dc6 <__sflush_r+0x66>
 8008db8:	6829      	ldr	r1, [r5, #0]
 8008dba:	291d      	cmp	r1, #29
 8008dbc:	d82c      	bhi.n	8008e18 <__sflush_r+0xb8>
 8008dbe:	4a2a      	ldr	r2, [pc, #168]	; (8008e68 <__sflush_r+0x108>)
 8008dc0:	40ca      	lsrs	r2, r1
 8008dc2:	07d6      	lsls	r6, r2, #31
 8008dc4:	d528      	bpl.n	8008e18 <__sflush_r+0xb8>
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	6062      	str	r2, [r4, #4]
 8008dca:	04d9      	lsls	r1, r3, #19
 8008dcc:	6922      	ldr	r2, [r4, #16]
 8008dce:	6022      	str	r2, [r4, #0]
 8008dd0:	d504      	bpl.n	8008ddc <__sflush_r+0x7c>
 8008dd2:	1c42      	adds	r2, r0, #1
 8008dd4:	d101      	bne.n	8008dda <__sflush_r+0x7a>
 8008dd6:	682b      	ldr	r3, [r5, #0]
 8008dd8:	b903      	cbnz	r3, 8008ddc <__sflush_r+0x7c>
 8008dda:	6560      	str	r0, [r4, #84]	; 0x54
 8008ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dde:	602f      	str	r7, [r5, #0]
 8008de0:	2900      	cmp	r1, #0
 8008de2:	d0ca      	beq.n	8008d7a <__sflush_r+0x1a>
 8008de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008de8:	4299      	cmp	r1, r3
 8008dea:	d002      	beq.n	8008df2 <__sflush_r+0x92>
 8008dec:	4628      	mov	r0, r5
 8008dee:	f000 f9d7 	bl	80091a0 <_free_r>
 8008df2:	2000      	movs	r0, #0
 8008df4:	6360      	str	r0, [r4, #52]	; 0x34
 8008df6:	e7c1      	b.n	8008d7c <__sflush_r+0x1c>
 8008df8:	6a21      	ldr	r1, [r4, #32]
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47b0      	blx	r6
 8008e00:	1c41      	adds	r1, r0, #1
 8008e02:	d1c7      	bne.n	8008d94 <__sflush_r+0x34>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0c4      	beq.n	8008d94 <__sflush_r+0x34>
 8008e0a:	2b1d      	cmp	r3, #29
 8008e0c:	d001      	beq.n	8008e12 <__sflush_r+0xb2>
 8008e0e:	2b16      	cmp	r3, #22
 8008e10:	d101      	bne.n	8008e16 <__sflush_r+0xb6>
 8008e12:	602f      	str	r7, [r5, #0]
 8008e14:	e7b1      	b.n	8008d7a <__sflush_r+0x1a>
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e1c:	81a3      	strh	r3, [r4, #12]
 8008e1e:	e7ad      	b.n	8008d7c <__sflush_r+0x1c>
 8008e20:	690f      	ldr	r7, [r1, #16]
 8008e22:	2f00      	cmp	r7, #0
 8008e24:	d0a9      	beq.n	8008d7a <__sflush_r+0x1a>
 8008e26:	0793      	lsls	r3, r2, #30
 8008e28:	680e      	ldr	r6, [r1, #0]
 8008e2a:	bf08      	it	eq
 8008e2c:	694b      	ldreq	r3, [r1, #20]
 8008e2e:	600f      	str	r7, [r1, #0]
 8008e30:	bf18      	it	ne
 8008e32:	2300      	movne	r3, #0
 8008e34:	eba6 0807 	sub.w	r8, r6, r7
 8008e38:	608b      	str	r3, [r1, #8]
 8008e3a:	f1b8 0f00 	cmp.w	r8, #0
 8008e3e:	dd9c      	ble.n	8008d7a <__sflush_r+0x1a>
 8008e40:	6a21      	ldr	r1, [r4, #32]
 8008e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e44:	4643      	mov	r3, r8
 8008e46:	463a      	mov	r2, r7
 8008e48:	4628      	mov	r0, r5
 8008e4a:	47b0      	blx	r6
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	dc06      	bgt.n	8008e5e <__sflush_r+0xfe>
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e56:	81a3      	strh	r3, [r4, #12]
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	e78e      	b.n	8008d7c <__sflush_r+0x1c>
 8008e5e:	4407      	add	r7, r0
 8008e60:	eba8 0800 	sub.w	r8, r8, r0
 8008e64:	e7e9      	b.n	8008e3a <__sflush_r+0xda>
 8008e66:	bf00      	nop
 8008e68:	20400001 	.word	0x20400001

08008e6c <_fflush_r>:
 8008e6c:	b538      	push	{r3, r4, r5, lr}
 8008e6e:	690b      	ldr	r3, [r1, #16]
 8008e70:	4605      	mov	r5, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	b913      	cbnz	r3, 8008e7c <_fflush_r+0x10>
 8008e76:	2500      	movs	r5, #0
 8008e78:	4628      	mov	r0, r5
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	b118      	cbz	r0, 8008e86 <_fflush_r+0x1a>
 8008e7e:	6983      	ldr	r3, [r0, #24]
 8008e80:	b90b      	cbnz	r3, 8008e86 <_fflush_r+0x1a>
 8008e82:	f000 f887 	bl	8008f94 <__sinit>
 8008e86:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <_fflush_r+0x6c>)
 8008e88:	429c      	cmp	r4, r3
 8008e8a:	d11b      	bne.n	8008ec4 <_fflush_r+0x58>
 8008e8c:	686c      	ldr	r4, [r5, #4]
 8008e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0ef      	beq.n	8008e76 <_fflush_r+0xa>
 8008e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e98:	07d0      	lsls	r0, r2, #31
 8008e9a:	d404      	bmi.n	8008ea6 <_fflush_r+0x3a>
 8008e9c:	0599      	lsls	r1, r3, #22
 8008e9e:	d402      	bmi.n	8008ea6 <_fflush_r+0x3a>
 8008ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ea2:	f000 f915 	bl	80090d0 <__retarget_lock_acquire_recursive>
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	f7ff ff59 	bl	8008d60 <__sflush_r>
 8008eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eb0:	07da      	lsls	r2, r3, #31
 8008eb2:	4605      	mov	r5, r0
 8008eb4:	d4e0      	bmi.n	8008e78 <_fflush_r+0xc>
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	059b      	lsls	r3, r3, #22
 8008eba:	d4dd      	bmi.n	8008e78 <_fflush_r+0xc>
 8008ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ebe:	f000 f908 	bl	80090d2 <__retarget_lock_release_recursive>
 8008ec2:	e7d9      	b.n	8008e78 <_fflush_r+0xc>
 8008ec4:	4b05      	ldr	r3, [pc, #20]	; (8008edc <_fflush_r+0x70>)
 8008ec6:	429c      	cmp	r4, r3
 8008ec8:	d101      	bne.n	8008ece <_fflush_r+0x62>
 8008eca:	68ac      	ldr	r4, [r5, #8]
 8008ecc:	e7df      	b.n	8008e8e <_fflush_r+0x22>
 8008ece:	4b04      	ldr	r3, [pc, #16]	; (8008ee0 <_fflush_r+0x74>)
 8008ed0:	429c      	cmp	r4, r3
 8008ed2:	bf08      	it	eq
 8008ed4:	68ec      	ldreq	r4, [r5, #12]
 8008ed6:	e7da      	b.n	8008e8e <_fflush_r+0x22>
 8008ed8:	0800955c 	.word	0x0800955c
 8008edc:	0800957c 	.word	0x0800957c
 8008ee0:	0800953c 	.word	0x0800953c

08008ee4 <std>:
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	4604      	mov	r4, r0
 8008eea:	e9c0 3300 	strd	r3, r3, [r0]
 8008eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ef2:	6083      	str	r3, [r0, #8]
 8008ef4:	8181      	strh	r1, [r0, #12]
 8008ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ef8:	81c2      	strh	r2, [r0, #14]
 8008efa:	6183      	str	r3, [r0, #24]
 8008efc:	4619      	mov	r1, r3
 8008efe:	2208      	movs	r2, #8
 8008f00:	305c      	adds	r0, #92	; 0x5c
 8008f02:	f7ff fdef 	bl	8008ae4 <memset>
 8008f06:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <std+0x38>)
 8008f08:	6263      	str	r3, [r4, #36]	; 0x24
 8008f0a:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <std+0x3c>)
 8008f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f0e:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <std+0x40>)
 8008f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f12:	4b05      	ldr	r3, [pc, #20]	; (8008f28 <std+0x44>)
 8008f14:	6224      	str	r4, [r4, #32]
 8008f16:	6323      	str	r3, [r4, #48]	; 0x30
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	bf00      	nop
 8008f1c:	08009381 	.word	0x08009381
 8008f20:	080093a3 	.word	0x080093a3
 8008f24:	080093db 	.word	0x080093db
 8008f28:	080093ff 	.word	0x080093ff

08008f2c <_cleanup_r>:
 8008f2c:	4901      	ldr	r1, [pc, #4]	; (8008f34 <_cleanup_r+0x8>)
 8008f2e:	f000 b8af 	b.w	8009090 <_fwalk_reent>
 8008f32:	bf00      	nop
 8008f34:	08008e6d 	.word	0x08008e6d

08008f38 <__sfmoreglue>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	2268      	movs	r2, #104	; 0x68
 8008f3c:	1e4d      	subs	r5, r1, #1
 8008f3e:	4355      	muls	r5, r2
 8008f40:	460e      	mov	r6, r1
 8008f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f46:	f000 f997 	bl	8009278 <_malloc_r>
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	b140      	cbz	r0, 8008f60 <__sfmoreglue+0x28>
 8008f4e:	2100      	movs	r1, #0
 8008f50:	e9c0 1600 	strd	r1, r6, [r0]
 8008f54:	300c      	adds	r0, #12
 8008f56:	60a0      	str	r0, [r4, #8]
 8008f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f5c:	f7ff fdc2 	bl	8008ae4 <memset>
 8008f60:	4620      	mov	r0, r4
 8008f62:	bd70      	pop	{r4, r5, r6, pc}

08008f64 <__sfp_lock_acquire>:
 8008f64:	4801      	ldr	r0, [pc, #4]	; (8008f6c <__sfp_lock_acquire+0x8>)
 8008f66:	f000 b8b3 	b.w	80090d0 <__retarget_lock_acquire_recursive>
 8008f6a:	bf00      	nop
 8008f6c:	2000008d 	.word	0x2000008d

08008f70 <__sfp_lock_release>:
 8008f70:	4801      	ldr	r0, [pc, #4]	; (8008f78 <__sfp_lock_release+0x8>)
 8008f72:	f000 b8ae 	b.w	80090d2 <__retarget_lock_release_recursive>
 8008f76:	bf00      	nop
 8008f78:	2000008d 	.word	0x2000008d

08008f7c <__sinit_lock_acquire>:
 8008f7c:	4801      	ldr	r0, [pc, #4]	; (8008f84 <__sinit_lock_acquire+0x8>)
 8008f7e:	f000 b8a7 	b.w	80090d0 <__retarget_lock_acquire_recursive>
 8008f82:	bf00      	nop
 8008f84:	2000008e 	.word	0x2000008e

08008f88 <__sinit_lock_release>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__sinit_lock_release+0x8>)
 8008f8a:	f000 b8a2 	b.w	80090d2 <__retarget_lock_release_recursive>
 8008f8e:	bf00      	nop
 8008f90:	2000008e 	.word	0x2000008e

08008f94 <__sinit>:
 8008f94:	b510      	push	{r4, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	f7ff fff0 	bl	8008f7c <__sinit_lock_acquire>
 8008f9c:	69a3      	ldr	r3, [r4, #24]
 8008f9e:	b11b      	cbz	r3, 8008fa8 <__sinit+0x14>
 8008fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa4:	f7ff bff0 	b.w	8008f88 <__sinit_lock_release>
 8008fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fac:	6523      	str	r3, [r4, #80]	; 0x50
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <__sinit+0x68>)
 8008fb0:	4a13      	ldr	r2, [pc, #76]	; (8009000 <__sinit+0x6c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	bf04      	itt	eq
 8008fba:	2301      	moveq	r3, #1
 8008fbc:	61a3      	streq	r3, [r4, #24]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 f820 	bl	8009004 <__sfp>
 8008fc4:	6060      	str	r0, [r4, #4]
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f000 f81c 	bl	8009004 <__sfp>
 8008fcc:	60a0      	str	r0, [r4, #8]
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 f818 	bl	8009004 <__sfp>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	60e0      	str	r0, [r4, #12]
 8008fd8:	2104      	movs	r1, #4
 8008fda:	6860      	ldr	r0, [r4, #4]
 8008fdc:	f7ff ff82 	bl	8008ee4 <std>
 8008fe0:	68a0      	ldr	r0, [r4, #8]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	2109      	movs	r1, #9
 8008fe6:	f7ff ff7d 	bl	8008ee4 <std>
 8008fea:	68e0      	ldr	r0, [r4, #12]
 8008fec:	2202      	movs	r2, #2
 8008fee:	2112      	movs	r1, #18
 8008ff0:	f7ff ff78 	bl	8008ee4 <std>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	61a3      	str	r3, [r4, #24]
 8008ff8:	e7d2      	b.n	8008fa0 <__sinit+0xc>
 8008ffa:	bf00      	nop
 8008ffc:	08009538 	.word	0x08009538
 8009000:	08008f2d 	.word	0x08008f2d

08009004 <__sfp>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	4607      	mov	r7, r0
 8009008:	f7ff ffac 	bl	8008f64 <__sfp_lock_acquire>
 800900c:	4b1e      	ldr	r3, [pc, #120]	; (8009088 <__sfp+0x84>)
 800900e:	681e      	ldr	r6, [r3, #0]
 8009010:	69b3      	ldr	r3, [r6, #24]
 8009012:	b913      	cbnz	r3, 800901a <__sfp+0x16>
 8009014:	4630      	mov	r0, r6
 8009016:	f7ff ffbd 	bl	8008f94 <__sinit>
 800901a:	3648      	adds	r6, #72	; 0x48
 800901c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009020:	3b01      	subs	r3, #1
 8009022:	d503      	bpl.n	800902c <__sfp+0x28>
 8009024:	6833      	ldr	r3, [r6, #0]
 8009026:	b30b      	cbz	r3, 800906c <__sfp+0x68>
 8009028:	6836      	ldr	r6, [r6, #0]
 800902a:	e7f7      	b.n	800901c <__sfp+0x18>
 800902c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009030:	b9d5      	cbnz	r5, 8009068 <__sfp+0x64>
 8009032:	4b16      	ldr	r3, [pc, #88]	; (800908c <__sfp+0x88>)
 8009034:	60e3      	str	r3, [r4, #12]
 8009036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800903a:	6665      	str	r5, [r4, #100]	; 0x64
 800903c:	f000 f847 	bl	80090ce <__retarget_lock_init_recursive>
 8009040:	f7ff ff96 	bl	8008f70 <__sfp_lock_release>
 8009044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800904c:	6025      	str	r5, [r4, #0]
 800904e:	61a5      	str	r5, [r4, #24]
 8009050:	2208      	movs	r2, #8
 8009052:	4629      	mov	r1, r5
 8009054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009058:	f7ff fd44 	bl	8008ae4 <memset>
 800905c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009064:	4620      	mov	r0, r4
 8009066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009068:	3468      	adds	r4, #104	; 0x68
 800906a:	e7d9      	b.n	8009020 <__sfp+0x1c>
 800906c:	2104      	movs	r1, #4
 800906e:	4638      	mov	r0, r7
 8009070:	f7ff ff62 	bl	8008f38 <__sfmoreglue>
 8009074:	4604      	mov	r4, r0
 8009076:	6030      	str	r0, [r6, #0]
 8009078:	2800      	cmp	r0, #0
 800907a:	d1d5      	bne.n	8009028 <__sfp+0x24>
 800907c:	f7ff ff78 	bl	8008f70 <__sfp_lock_release>
 8009080:	230c      	movs	r3, #12
 8009082:	603b      	str	r3, [r7, #0]
 8009084:	e7ee      	b.n	8009064 <__sfp+0x60>
 8009086:	bf00      	nop
 8009088:	08009538 	.word	0x08009538
 800908c:	ffff0001 	.word	0xffff0001

08009090 <_fwalk_reent>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4606      	mov	r6, r0
 8009096:	4688      	mov	r8, r1
 8009098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800909c:	2700      	movs	r7, #0
 800909e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090a2:	f1b9 0901 	subs.w	r9, r9, #1
 80090a6:	d505      	bpl.n	80090b4 <_fwalk_reent+0x24>
 80090a8:	6824      	ldr	r4, [r4, #0]
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	d1f7      	bne.n	800909e <_fwalk_reent+0xe>
 80090ae:	4638      	mov	r0, r7
 80090b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d907      	bls.n	80090ca <_fwalk_reent+0x3a>
 80090ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090be:	3301      	adds	r3, #1
 80090c0:	d003      	beq.n	80090ca <_fwalk_reent+0x3a>
 80090c2:	4629      	mov	r1, r5
 80090c4:	4630      	mov	r0, r6
 80090c6:	47c0      	blx	r8
 80090c8:	4307      	orrs	r7, r0
 80090ca:	3568      	adds	r5, #104	; 0x68
 80090cc:	e7e9      	b.n	80090a2 <_fwalk_reent+0x12>

080090ce <__retarget_lock_init_recursive>:
 80090ce:	4770      	bx	lr

080090d0 <__retarget_lock_acquire_recursive>:
 80090d0:	4770      	bx	lr

080090d2 <__retarget_lock_release_recursive>:
 80090d2:	4770      	bx	lr

080090d4 <__swhatbuf_r>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	460e      	mov	r6, r1
 80090d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090dc:	2900      	cmp	r1, #0
 80090de:	b096      	sub	sp, #88	; 0x58
 80090e0:	4614      	mov	r4, r2
 80090e2:	461d      	mov	r5, r3
 80090e4:	da08      	bge.n	80090f8 <__swhatbuf_r+0x24>
 80090e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	602a      	str	r2, [r5, #0]
 80090ee:	061a      	lsls	r2, r3, #24
 80090f0:	d410      	bmi.n	8009114 <__swhatbuf_r+0x40>
 80090f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090f6:	e00e      	b.n	8009116 <__swhatbuf_r+0x42>
 80090f8:	466a      	mov	r2, sp
 80090fa:	f000 f9a7 	bl	800944c <_fstat_r>
 80090fe:	2800      	cmp	r0, #0
 8009100:	dbf1      	blt.n	80090e6 <__swhatbuf_r+0x12>
 8009102:	9a01      	ldr	r2, [sp, #4]
 8009104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800910c:	425a      	negs	r2, r3
 800910e:	415a      	adcs	r2, r3
 8009110:	602a      	str	r2, [r5, #0]
 8009112:	e7ee      	b.n	80090f2 <__swhatbuf_r+0x1e>
 8009114:	2340      	movs	r3, #64	; 0x40
 8009116:	2000      	movs	r0, #0
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	b016      	add	sp, #88	; 0x58
 800911c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009120 <__smakebuf_r>:
 8009120:	898b      	ldrh	r3, [r1, #12]
 8009122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009124:	079d      	lsls	r5, r3, #30
 8009126:	4606      	mov	r6, r0
 8009128:	460c      	mov	r4, r1
 800912a:	d507      	bpl.n	800913c <__smakebuf_r+0x1c>
 800912c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	6123      	str	r3, [r4, #16]
 8009134:	2301      	movs	r3, #1
 8009136:	6163      	str	r3, [r4, #20]
 8009138:	b002      	add	sp, #8
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	ab01      	add	r3, sp, #4
 800913e:	466a      	mov	r2, sp
 8009140:	f7ff ffc8 	bl	80090d4 <__swhatbuf_r>
 8009144:	9900      	ldr	r1, [sp, #0]
 8009146:	4605      	mov	r5, r0
 8009148:	4630      	mov	r0, r6
 800914a:	f000 f895 	bl	8009278 <_malloc_r>
 800914e:	b948      	cbnz	r0, 8009164 <__smakebuf_r+0x44>
 8009150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009154:	059a      	lsls	r2, r3, #22
 8009156:	d4ef      	bmi.n	8009138 <__smakebuf_r+0x18>
 8009158:	f023 0303 	bic.w	r3, r3, #3
 800915c:	f043 0302 	orr.w	r3, r3, #2
 8009160:	81a3      	strh	r3, [r4, #12]
 8009162:	e7e3      	b.n	800912c <__smakebuf_r+0xc>
 8009164:	4b0d      	ldr	r3, [pc, #52]	; (800919c <__smakebuf_r+0x7c>)
 8009166:	62b3      	str	r3, [r6, #40]	; 0x28
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	6020      	str	r0, [r4, #0]
 800916c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	9b00      	ldr	r3, [sp, #0]
 8009174:	6163      	str	r3, [r4, #20]
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	6120      	str	r0, [r4, #16]
 800917a:	b15b      	cbz	r3, 8009194 <__smakebuf_r+0x74>
 800917c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009180:	4630      	mov	r0, r6
 8009182:	f000 f975 	bl	8009470 <_isatty_r>
 8009186:	b128      	cbz	r0, 8009194 <__smakebuf_r+0x74>
 8009188:	89a3      	ldrh	r3, [r4, #12]
 800918a:	f023 0303 	bic.w	r3, r3, #3
 800918e:	f043 0301 	orr.w	r3, r3, #1
 8009192:	81a3      	strh	r3, [r4, #12]
 8009194:	89a0      	ldrh	r0, [r4, #12]
 8009196:	4305      	orrs	r5, r0
 8009198:	81a5      	strh	r5, [r4, #12]
 800919a:	e7cd      	b.n	8009138 <__smakebuf_r+0x18>
 800919c:	08008f2d 	.word	0x08008f2d

080091a0 <_free_r>:
 80091a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091a2:	2900      	cmp	r1, #0
 80091a4:	d044      	beq.n	8009230 <_free_r+0x90>
 80091a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091aa:	9001      	str	r0, [sp, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f1a1 0404 	sub.w	r4, r1, #4
 80091b2:	bfb8      	it	lt
 80091b4:	18e4      	addlt	r4, r4, r3
 80091b6:	f000 f97d 	bl	80094b4 <__malloc_lock>
 80091ba:	4a1e      	ldr	r2, [pc, #120]	; (8009234 <_free_r+0x94>)
 80091bc:	9801      	ldr	r0, [sp, #4]
 80091be:	6813      	ldr	r3, [r2, #0]
 80091c0:	b933      	cbnz	r3, 80091d0 <_free_r+0x30>
 80091c2:	6063      	str	r3, [r4, #4]
 80091c4:	6014      	str	r4, [r2, #0]
 80091c6:	b003      	add	sp, #12
 80091c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091cc:	f000 b978 	b.w	80094c0 <__malloc_unlock>
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	d908      	bls.n	80091e6 <_free_r+0x46>
 80091d4:	6825      	ldr	r5, [r4, #0]
 80091d6:	1961      	adds	r1, r4, r5
 80091d8:	428b      	cmp	r3, r1
 80091da:	bf01      	itttt	eq
 80091dc:	6819      	ldreq	r1, [r3, #0]
 80091de:	685b      	ldreq	r3, [r3, #4]
 80091e0:	1949      	addeq	r1, r1, r5
 80091e2:	6021      	streq	r1, [r4, #0]
 80091e4:	e7ed      	b.n	80091c2 <_free_r+0x22>
 80091e6:	461a      	mov	r2, r3
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	b10b      	cbz	r3, 80091f0 <_free_r+0x50>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d9fa      	bls.n	80091e6 <_free_r+0x46>
 80091f0:	6811      	ldr	r1, [r2, #0]
 80091f2:	1855      	adds	r5, r2, r1
 80091f4:	42a5      	cmp	r5, r4
 80091f6:	d10b      	bne.n	8009210 <_free_r+0x70>
 80091f8:	6824      	ldr	r4, [r4, #0]
 80091fa:	4421      	add	r1, r4
 80091fc:	1854      	adds	r4, r2, r1
 80091fe:	42a3      	cmp	r3, r4
 8009200:	6011      	str	r1, [r2, #0]
 8009202:	d1e0      	bne.n	80091c6 <_free_r+0x26>
 8009204:	681c      	ldr	r4, [r3, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	6053      	str	r3, [r2, #4]
 800920a:	4421      	add	r1, r4
 800920c:	6011      	str	r1, [r2, #0]
 800920e:	e7da      	b.n	80091c6 <_free_r+0x26>
 8009210:	d902      	bls.n	8009218 <_free_r+0x78>
 8009212:	230c      	movs	r3, #12
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	e7d6      	b.n	80091c6 <_free_r+0x26>
 8009218:	6825      	ldr	r5, [r4, #0]
 800921a:	1961      	adds	r1, r4, r5
 800921c:	428b      	cmp	r3, r1
 800921e:	bf04      	itt	eq
 8009220:	6819      	ldreq	r1, [r3, #0]
 8009222:	685b      	ldreq	r3, [r3, #4]
 8009224:	6063      	str	r3, [r4, #4]
 8009226:	bf04      	itt	eq
 8009228:	1949      	addeq	r1, r1, r5
 800922a:	6021      	streq	r1, [r4, #0]
 800922c:	6054      	str	r4, [r2, #4]
 800922e:	e7ca      	b.n	80091c6 <_free_r+0x26>
 8009230:	b003      	add	sp, #12
 8009232:	bd30      	pop	{r4, r5, pc}
 8009234:	20000090 	.word	0x20000090

08009238 <sbrk_aligned>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	4e0e      	ldr	r6, [pc, #56]	; (8009274 <sbrk_aligned+0x3c>)
 800923c:	460c      	mov	r4, r1
 800923e:	6831      	ldr	r1, [r6, #0]
 8009240:	4605      	mov	r5, r0
 8009242:	b911      	cbnz	r1, 800924a <sbrk_aligned+0x12>
 8009244:	f000 f88c 	bl	8009360 <_sbrk_r>
 8009248:	6030      	str	r0, [r6, #0]
 800924a:	4621      	mov	r1, r4
 800924c:	4628      	mov	r0, r5
 800924e:	f000 f887 	bl	8009360 <_sbrk_r>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d00a      	beq.n	800926c <sbrk_aligned+0x34>
 8009256:	1cc4      	adds	r4, r0, #3
 8009258:	f024 0403 	bic.w	r4, r4, #3
 800925c:	42a0      	cmp	r0, r4
 800925e:	d007      	beq.n	8009270 <sbrk_aligned+0x38>
 8009260:	1a21      	subs	r1, r4, r0
 8009262:	4628      	mov	r0, r5
 8009264:	f000 f87c 	bl	8009360 <_sbrk_r>
 8009268:	3001      	adds	r0, #1
 800926a:	d101      	bne.n	8009270 <sbrk_aligned+0x38>
 800926c:	f04f 34ff 	mov.w	r4, #4294967295
 8009270:	4620      	mov	r0, r4
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	20000094 	.word	0x20000094

08009278 <_malloc_r>:
 8009278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927c:	1ccd      	adds	r5, r1, #3
 800927e:	f025 0503 	bic.w	r5, r5, #3
 8009282:	3508      	adds	r5, #8
 8009284:	2d0c      	cmp	r5, #12
 8009286:	bf38      	it	cc
 8009288:	250c      	movcc	r5, #12
 800928a:	2d00      	cmp	r5, #0
 800928c:	4607      	mov	r7, r0
 800928e:	db01      	blt.n	8009294 <_malloc_r+0x1c>
 8009290:	42a9      	cmp	r1, r5
 8009292:	d905      	bls.n	80092a0 <_malloc_r+0x28>
 8009294:	230c      	movs	r3, #12
 8009296:	603b      	str	r3, [r7, #0]
 8009298:	2600      	movs	r6, #0
 800929a:	4630      	mov	r0, r6
 800929c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a0:	4e2e      	ldr	r6, [pc, #184]	; (800935c <_malloc_r+0xe4>)
 80092a2:	f000 f907 	bl	80094b4 <__malloc_lock>
 80092a6:	6833      	ldr	r3, [r6, #0]
 80092a8:	461c      	mov	r4, r3
 80092aa:	bb34      	cbnz	r4, 80092fa <_malloc_r+0x82>
 80092ac:	4629      	mov	r1, r5
 80092ae:	4638      	mov	r0, r7
 80092b0:	f7ff ffc2 	bl	8009238 <sbrk_aligned>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	4604      	mov	r4, r0
 80092b8:	d14d      	bne.n	8009356 <_malloc_r+0xde>
 80092ba:	6834      	ldr	r4, [r6, #0]
 80092bc:	4626      	mov	r6, r4
 80092be:	2e00      	cmp	r6, #0
 80092c0:	d140      	bne.n	8009344 <_malloc_r+0xcc>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	4631      	mov	r1, r6
 80092c6:	4638      	mov	r0, r7
 80092c8:	eb04 0803 	add.w	r8, r4, r3
 80092cc:	f000 f848 	bl	8009360 <_sbrk_r>
 80092d0:	4580      	cmp	r8, r0
 80092d2:	d13a      	bne.n	800934a <_malloc_r+0xd2>
 80092d4:	6821      	ldr	r1, [r4, #0]
 80092d6:	3503      	adds	r5, #3
 80092d8:	1a6d      	subs	r5, r5, r1
 80092da:	f025 0503 	bic.w	r5, r5, #3
 80092de:	3508      	adds	r5, #8
 80092e0:	2d0c      	cmp	r5, #12
 80092e2:	bf38      	it	cc
 80092e4:	250c      	movcc	r5, #12
 80092e6:	4629      	mov	r1, r5
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ffa5 	bl	8009238 <sbrk_aligned>
 80092ee:	3001      	adds	r0, #1
 80092f0:	d02b      	beq.n	800934a <_malloc_r+0xd2>
 80092f2:	6823      	ldr	r3, [r4, #0]
 80092f4:	442b      	add	r3, r5
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	e00e      	b.n	8009318 <_malloc_r+0xa0>
 80092fa:	6822      	ldr	r2, [r4, #0]
 80092fc:	1b52      	subs	r2, r2, r5
 80092fe:	d41e      	bmi.n	800933e <_malloc_r+0xc6>
 8009300:	2a0b      	cmp	r2, #11
 8009302:	d916      	bls.n	8009332 <_malloc_r+0xba>
 8009304:	1961      	adds	r1, r4, r5
 8009306:	42a3      	cmp	r3, r4
 8009308:	6025      	str	r5, [r4, #0]
 800930a:	bf18      	it	ne
 800930c:	6059      	strne	r1, [r3, #4]
 800930e:	6863      	ldr	r3, [r4, #4]
 8009310:	bf08      	it	eq
 8009312:	6031      	streq	r1, [r6, #0]
 8009314:	5162      	str	r2, [r4, r5]
 8009316:	604b      	str	r3, [r1, #4]
 8009318:	4638      	mov	r0, r7
 800931a:	f104 060b 	add.w	r6, r4, #11
 800931e:	f000 f8cf 	bl	80094c0 <__malloc_unlock>
 8009322:	f026 0607 	bic.w	r6, r6, #7
 8009326:	1d23      	adds	r3, r4, #4
 8009328:	1af2      	subs	r2, r6, r3
 800932a:	d0b6      	beq.n	800929a <_malloc_r+0x22>
 800932c:	1b9b      	subs	r3, r3, r6
 800932e:	50a3      	str	r3, [r4, r2]
 8009330:	e7b3      	b.n	800929a <_malloc_r+0x22>
 8009332:	6862      	ldr	r2, [r4, #4]
 8009334:	42a3      	cmp	r3, r4
 8009336:	bf0c      	ite	eq
 8009338:	6032      	streq	r2, [r6, #0]
 800933a:	605a      	strne	r2, [r3, #4]
 800933c:	e7ec      	b.n	8009318 <_malloc_r+0xa0>
 800933e:	4623      	mov	r3, r4
 8009340:	6864      	ldr	r4, [r4, #4]
 8009342:	e7b2      	b.n	80092aa <_malloc_r+0x32>
 8009344:	4634      	mov	r4, r6
 8009346:	6876      	ldr	r6, [r6, #4]
 8009348:	e7b9      	b.n	80092be <_malloc_r+0x46>
 800934a:	230c      	movs	r3, #12
 800934c:	603b      	str	r3, [r7, #0]
 800934e:	4638      	mov	r0, r7
 8009350:	f000 f8b6 	bl	80094c0 <__malloc_unlock>
 8009354:	e7a1      	b.n	800929a <_malloc_r+0x22>
 8009356:	6025      	str	r5, [r4, #0]
 8009358:	e7de      	b.n	8009318 <_malloc_r+0xa0>
 800935a:	bf00      	nop
 800935c:	20000090 	.word	0x20000090

08009360 <_sbrk_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d06      	ldr	r5, [pc, #24]	; (800937c <_sbrk_r+0x1c>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	f7ff f864 	bl	8008438 <_sbrk>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_sbrk_r+0x1a>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_sbrk_r+0x1a>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	20000098 	.word	0x20000098

08009380 <__sread>:
 8009380:	b510      	push	{r4, lr}
 8009382:	460c      	mov	r4, r1
 8009384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009388:	f000 f8a0 	bl	80094cc <_read_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	bfab      	itete	ge
 8009390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009392:	89a3      	ldrhlt	r3, [r4, #12]
 8009394:	181b      	addge	r3, r3, r0
 8009396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800939a:	bfac      	ite	ge
 800939c:	6563      	strge	r3, [r4, #84]	; 0x54
 800939e:	81a3      	strhlt	r3, [r4, #12]
 80093a0:	bd10      	pop	{r4, pc}

080093a2 <__swrite>:
 80093a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a6:	461f      	mov	r7, r3
 80093a8:	898b      	ldrh	r3, [r1, #12]
 80093aa:	05db      	lsls	r3, r3, #23
 80093ac:	4605      	mov	r5, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	4616      	mov	r6, r2
 80093b2:	d505      	bpl.n	80093c0 <__swrite+0x1e>
 80093b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b8:	2302      	movs	r3, #2
 80093ba:	2200      	movs	r2, #0
 80093bc:	f000 f868 	bl	8009490 <_lseek_r>
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	4632      	mov	r2, r6
 80093ce:	463b      	mov	r3, r7
 80093d0:	4628      	mov	r0, r5
 80093d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093d6:	f000 b817 	b.w	8009408 <_write_r>

080093da <__sseek>:
 80093da:	b510      	push	{r4, lr}
 80093dc:	460c      	mov	r4, r1
 80093de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e2:	f000 f855 	bl	8009490 <_lseek_r>
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	bf15      	itete	ne
 80093ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80093ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093f6:	81a3      	strheq	r3, [r4, #12]
 80093f8:	bf18      	it	ne
 80093fa:	81a3      	strhne	r3, [r4, #12]
 80093fc:	bd10      	pop	{r4, pc}

080093fe <__sclose>:
 80093fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009402:	f000 b813 	b.w	800942c <_close_r>
	...

08009408 <_write_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d07      	ldr	r5, [pc, #28]	; (8009428 <_write_r+0x20>)
 800940c:	4604      	mov	r4, r0
 800940e:	4608      	mov	r0, r1
 8009410:	4611      	mov	r1, r2
 8009412:	2200      	movs	r2, #0
 8009414:	602a      	str	r2, [r5, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	f7fe ffbd 	bl	8008396 <_write>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	d102      	bne.n	8009426 <_write_r+0x1e>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b103      	cbz	r3, 8009426 <_write_r+0x1e>
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	20000098 	.word	0x20000098

0800942c <_close_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d06      	ldr	r5, [pc, #24]	; (8009448 <_close_r+0x1c>)
 8009430:	2300      	movs	r3, #0
 8009432:	4604      	mov	r4, r0
 8009434:	4608      	mov	r0, r1
 8009436:	602b      	str	r3, [r5, #0]
 8009438:	f7fe ffc9 	bl	80083ce <_close>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_close_r+0x1a>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_close_r+0x1a>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20000098 	.word	0x20000098

0800944c <_fstat_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4d07      	ldr	r5, [pc, #28]	; (800946c <_fstat_r+0x20>)
 8009450:	2300      	movs	r3, #0
 8009452:	4604      	mov	r4, r0
 8009454:	4608      	mov	r0, r1
 8009456:	4611      	mov	r1, r2
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	f7fe ffc4 	bl	80083e6 <_fstat>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d102      	bne.n	8009468 <_fstat_r+0x1c>
 8009462:	682b      	ldr	r3, [r5, #0]
 8009464:	b103      	cbz	r3, 8009468 <_fstat_r+0x1c>
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	bd38      	pop	{r3, r4, r5, pc}
 800946a:	bf00      	nop
 800946c:	20000098 	.word	0x20000098

08009470 <_isatty_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4d06      	ldr	r5, [pc, #24]	; (800948c <_isatty_r+0x1c>)
 8009474:	2300      	movs	r3, #0
 8009476:	4604      	mov	r4, r0
 8009478:	4608      	mov	r0, r1
 800947a:	602b      	str	r3, [r5, #0]
 800947c:	f7fe ffc3 	bl	8008406 <_isatty>
 8009480:	1c43      	adds	r3, r0, #1
 8009482:	d102      	bne.n	800948a <_isatty_r+0x1a>
 8009484:	682b      	ldr	r3, [r5, #0]
 8009486:	b103      	cbz	r3, 800948a <_isatty_r+0x1a>
 8009488:	6023      	str	r3, [r4, #0]
 800948a:	bd38      	pop	{r3, r4, r5, pc}
 800948c:	20000098 	.word	0x20000098

08009490 <_lseek_r>:
 8009490:	b538      	push	{r3, r4, r5, lr}
 8009492:	4d07      	ldr	r5, [pc, #28]	; (80094b0 <_lseek_r+0x20>)
 8009494:	4604      	mov	r4, r0
 8009496:	4608      	mov	r0, r1
 8009498:	4611      	mov	r1, r2
 800949a:	2200      	movs	r2, #0
 800949c:	602a      	str	r2, [r5, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	f7fe ffbc 	bl	800841c <_lseek>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_lseek_r+0x1e>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_lseek_r+0x1e>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	20000098 	.word	0x20000098

080094b4 <__malloc_lock>:
 80094b4:	4801      	ldr	r0, [pc, #4]	; (80094bc <__malloc_lock+0x8>)
 80094b6:	f7ff be0b 	b.w	80090d0 <__retarget_lock_acquire_recursive>
 80094ba:	bf00      	nop
 80094bc:	2000008c 	.word	0x2000008c

080094c0 <__malloc_unlock>:
 80094c0:	4801      	ldr	r0, [pc, #4]	; (80094c8 <__malloc_unlock+0x8>)
 80094c2:	f7ff be06 	b.w	80090d2 <__retarget_lock_release_recursive>
 80094c6:	bf00      	nop
 80094c8:	2000008c 	.word	0x2000008c

080094cc <_read_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d07      	ldr	r5, [pc, #28]	; (80094ec <_read_r+0x20>)
 80094d0:	4604      	mov	r4, r0
 80094d2:	4608      	mov	r0, r1
 80094d4:	4611      	mov	r1, r2
 80094d6:	2200      	movs	r2, #0
 80094d8:	602a      	str	r2, [r5, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	f7fe ff3e 	bl	800835c <_read>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_read_r+0x1e>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_read_r+0x1e>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	20000098 	.word	0x20000098

080094f0 <_init>:
 80094f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f2:	bf00      	nop
 80094f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094f6:	bc08      	pop	{r3}
 80094f8:	469e      	mov	lr, r3
 80094fa:	4770      	bx	lr

080094fc <_fini>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	bf00      	nop
 8009500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009502:	bc08      	pop	{r3}
 8009504:	469e      	mov	lr, r3
 8009506:	4770      	bx	lr
