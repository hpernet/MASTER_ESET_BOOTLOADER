
BootLoarder_TP_BootLoader0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e44  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08001008  08001008  00011008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001098  08001098  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001098  08001098  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001098  08001098  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001098  08001098  00011098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800109c  0800109c  0001109c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080010a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08001108  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001108  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002239  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008fd  00000000  00000000  000222d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e0  00000000  00000000  00022bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000258  00000000  00000000  00022eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210c0  00000000  00000000  00023108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002eec  00000000  00000000  000441c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8181  00000000  00000000  000470b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f235  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f94  00000000  00000000  0010f288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000ff0 	.word	0x08000ff0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08000ff0 	.word	0x08000ff0

08000204 <GPIO_Init>:
#include <stdint.h>
#include <stm32f446xx.h>
#include "main.h"
#include "gpio.h"

void GPIO_Init(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/* Clock Init */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOCEN;
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <GPIO_Init+0x30>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a09      	ldr	r2, [pc, #36]	; (8000234 <GPIO_Init+0x30>)
 800020e:	f043 0305 	orr.w	r3, r3, #5
 8000212:	6313      	str	r3, [r2, #48]	; 0x30

	/* GPIO Init */
	GPIOA->MODER |= OUTPUT_MODE <<10;		// PA5 Output LED
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <GPIO_Init+0x34>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <GPIO_Init+0x34>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= INPUT_MODE	<< 26;		// PC13 Input Push-Button
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <GPIO_Init+0x38>)
 8000222:	4a06      	ldr	r2, [pc, #24]	; (800023c <GPIO_Init+0x38>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	6013      	str	r3, [r2, #0]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000
 800023c:	40020800 	.word	0x40020800

08000240 <__io_putchar>:
// Define
#define FLASH_SECTOR_2 (uint32_t*) 0x08008000

// Private functions
int __io_putchar(int ch)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	while(((USART2->SR)&= (1<<7))==0);
 8000248:	bf00      	nop
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <__io_putchar+0x30>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a08      	ldr	r2, [pc, #32]	; (8000270 <__io_putchar+0x30>)
 8000250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000254:	6013      	str	r3, [r2, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f7      	beq.n	800024a <__io_putchar+0xa>
	USART2->DR = ch;
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <__io_putchar+0x30>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	6053      	str	r3, [r2, #4]
}
 8000260:	bf00      	nop
 8000262:	4618      	mov	r0, r3
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40004400 	.word	0x40004400

08000274 <main>:

// Main
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	// Variable declaration
	void (*p_application_function) (void);

	// Initialize Application function address
	p_application_function = *(FLASH_SECTOR_2 + 1);
 800027a:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <main+0x54>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	603b      	str	r3, [r7, #0]

	// Initialize peripherals
	GPIO_Init();
 8000280:	f7ff ffc0 	bl	8000204 <GPIO_Init>
	USART2_Init();
 8000284:	f000 f90c 	bl	80004a0 <USART2_Init>

	// Check pushbutton
	if((GPIOC->IDR & (1<<13)) == (1<<13))
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <main+0x58>)
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000294:	d104      	bne.n	80002a0 <main+0x2c>
	{
		// Lunch application
		printf("Launch Application\r\n");
 8000296:	480e      	ldr	r0, [pc, #56]	; (80002d0 <main+0x5c>)
 8000298:	f000 fa1a 	bl	80006d0 <puts>
		p_application_function();
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	4798      	blx	r3

	// Infinite loop
	while(1)
	{
		// Bootloader code
		for(uint32_t i = 0 ; i<100000; i++);
 80002a0:	2300      	movs	r3, #0
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	e002      	b.n	80002ac <main+0x38>
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	3301      	adds	r3, #1
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a09      	ldr	r2, [pc, #36]	; (80002d4 <main+0x60>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d9f8      	bls.n	80002a6 <main+0x32>
		GPIOA->ODR ^= 1<<5;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <main+0x64>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <main+0x64>)
 80002ba:	f083 0320 	eor.w	r3, r3, #32
 80002be:	6153      	str	r3, [r2, #20]
		printf("This is BootLoader0\r\n");
 80002c0:	4806      	ldr	r0, [pc, #24]	; (80002dc <main+0x68>)
 80002c2:	f000 fa05 	bl	80006d0 <puts>
		for(uint32_t i = 0 ; i<100000; i++);
 80002c6:	e7eb      	b.n	80002a0 <main+0x2c>
 80002c8:	08008004 	.word	0x08008004
 80002cc:	40020800 	.word	0x40020800
 80002d0:	08001008 	.word	0x08001008
 80002d4:	0001869f 	.word	0x0001869f
 80002d8:	40020000 	.word	0x40020000
 80002dc:	0800101c 	.word	0x0800101c

080002e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <NMI_Handler+0x4>

080002e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002ea:	e7fe      	b.n	80002ea <HardFault_Handler+0x4>

080002ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002f0:	e7fe      	b.n	80002f0 <MemManage_Handler+0x4>

080002f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002f6:	e7fe      	b.n	80002f6 <BusFault_Handler+0x4>

080002f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002fc:	e7fe      	b.n	80002fc <UsageFault_Handler+0x4>

080002fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800031a:	b480      	push	{r7}
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800032c:	f000 f91c 	bl	8000568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}

08000334 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
 800033a:	60f8      	str	r0, [r7, #12]
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	e00a      	b.n	800035c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000346:	f3af 8000 	nop.w
 800034a:	4601      	mov	r1, r0
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	1c5a      	adds	r2, r3, #1
 8000350:	60ba      	str	r2, [r7, #8]
 8000352:	b2ca      	uxtb	r2, r1
 8000354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	3301      	adds	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	429a      	cmp	r2, r3
 8000362:	dbf0      	blt.n	8000346 <_read+0x12>
	}

return len;
 8000364:	687b      	ldr	r3, [r7, #4]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3718      	adds	r7, #24
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800036e:	b580      	push	{r7, lr}
 8000370:	b086      	sub	sp, #24
 8000372:	af00      	add	r7, sp, #0
 8000374:	60f8      	str	r0, [r7, #12]
 8000376:	60b9      	str	r1, [r7, #8]
 8000378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
 800037e:	e009      	b.n	8000394 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	60ba      	str	r2, [r7, #8]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff59 	bl	8000240 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	3301      	adds	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
 8000394:	697a      	ldr	r2, [r7, #20]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	429a      	cmp	r2, r3
 800039a:	dbf1      	blt.n	8000380 <_write+0x12>
	}
	return len;
 800039c:	687b      	ldr	r3, [r7, #4]
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3718      	adds	r7, #24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}

080003a6 <_close>:

int _close(int file)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
	return -1;
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003be:	b480      	push	{r7}
 80003c0:	b083      	sub	sp, #12
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003ce:	605a      	str	r2, [r3, #4]
	return 0;
 80003d0:	2300      	movs	r3, #0
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <_isatty>:

int _isatty(int file)
{
 80003de:	b480      	push	{r7}
 80003e0:	b083      	sub	sp, #12
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
	return 1;
 80003e6:	2301      	movs	r3, #1
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
	return 0;
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
	...

08000410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000418:	4a14      	ldr	r2, [pc, #80]	; (800046c <_sbrk+0x5c>)
 800041a:	4b15      	ldr	r3, [pc, #84]	; (8000470 <_sbrk+0x60>)
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000424:	4b13      	ldr	r3, [pc, #76]	; (8000474 <_sbrk+0x64>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d102      	bne.n	8000432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <_sbrk+0x64>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <_sbrk+0x68>)
 8000430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <_sbrk+0x64>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4413      	add	r3, r2
 800043a:	693a      	ldr	r2, [r7, #16]
 800043c:	429a      	cmp	r2, r3
 800043e:	d207      	bcs.n	8000450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000440:	f000 f8a6 	bl	8000590 <__errno>
 8000444:	4603      	mov	r3, r0
 8000446:	220c      	movs	r2, #12
 8000448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800044a:	f04f 33ff 	mov.w	r3, #4294967295
 800044e:	e009      	b.n	8000464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <_sbrk+0x64>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000456:	4b07      	ldr	r3, [pc, #28]	; (8000474 <_sbrk+0x64>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	4a05      	ldr	r2, [pc, #20]	; (8000474 <_sbrk+0x64>)
 8000460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000462:	68fb      	ldr	r3, [r7, #12]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20020000 	.word	0x20020000
 8000470:	00000400 	.word	0x00000400
 8000474:	20000084 	.word	0x20000084
 8000478:	200000a0 	.word	0x200000a0

0800047c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <SystemInit+0x20>)
 8000482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000486:	4a05      	ldr	r2, [pc, #20]	; (800049c <SystemInit+0x20>)
 8000488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800048c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <USART2_Init>:
#include <stm32f446xx.h>
#include "main.h"
#include "usart.h"


void USART2_Init(void){
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
	/* USART2 Init */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;			// ABP1
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <USART2_Init+0x68>)
 80004a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a8:	4a17      	ldr	r2, [pc, #92]	; (8000508 <USART2_Init+0x68>)
 80004aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ae:	6413      	str	r3, [r2, #64]	; 0x40
	GPIOA->MODER |= ALT_MODE<<4;					// PA2
 80004b0:	4b16      	ldr	r3, [pc, #88]	; (800050c <USART2_Init+0x6c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a15      	ldr	r2, [pc, #84]	; (800050c <USART2_Init+0x6c>)
 80004b6:	f043 0320 	orr.w	r3, r3, #32
 80004ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ALT_MODE<<6;					// PA3
 80004bc:	4b13      	ldr	r3, [pc, #76]	; (800050c <USART2_Init+0x6c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a12      	ldr	r2, [pc, #72]	; (800050c <USART2_Init+0x6c>)
 80004c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004c6:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] |= 7<<8;							// USART2
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <USART2_Init+0x6c>)
 80004ca:	6a1b      	ldr	r3, [r3, #32]
 80004cc:	4a0f      	ldr	r2, [pc, #60]	; (800050c <USART2_Init+0x6c>)
 80004ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= 7<<12;							// USART2
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <USART2_Init+0x6c>)
 80004d6:	6a1b      	ldr	r3, [r3, #32]
 80004d8:	4a0c      	ldr	r2, [pc, #48]	; (800050c <USART2_Init+0x6c>)
 80004da:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80004de:	6213      	str	r3, [r2, #32]
	USART2->BRR  = 139;								// 115200 - APB1:16Mhz
 80004e0:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <USART2_Init+0x70>)
 80004e2:	228b      	movs	r2, #139	; 0x8b
 80004e4:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;		// RX-TX
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <USART2_Init+0x70>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	4a09      	ldr	r2, [pc, #36]	; (8000510 <USART2_Init+0x70>)
 80004ec:	f043 030c 	orr.w	r3, r3, #12
 80004f0:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_UE;
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <USART2_Init+0x70>)
 80004f4:	68db      	ldr	r3, [r3, #12]
 80004f6:	4a06      	ldr	r2, [pc, #24]	; (8000510 <USART2_Init+0x70>)
 80004f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004fc:	60d3      	str	r3, [r2, #12]
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40023800 	.word	0x40023800
 800050c:	40020000 	.word	0x40020000
 8000510:	40004400 	.word	0x40004400

08000514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800054c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800051a:	490e      	ldr	r1, [pc, #56]	; (8000554 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000530:	4c0b      	ldr	r4, [pc, #44]	; (8000560 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800053e:	f7ff ff9d 	bl	800047c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f000 f82b 	bl	800059c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000546:	f7ff fe95 	bl	8000274 <main>
  bx  lr    
 800054a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800054c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000558:	080010a0 	.word	0x080010a0
  ldr r2, =_sbss
 800055c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000560:	2000009c 	.word	0x2000009c

08000564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC_IRQHandler>
	...

08000568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_IncTick+0x20>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x24>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4413      	add	r3, r2
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_IncTick+0x24>)
 800057a:	6013      	str	r3, [r2, #0]
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000000 	.word	0x20000000
 800058c:	20000088 	.word	0x20000088

08000590 <__errno>:
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <__errno+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000004 	.word	0x20000004

0800059c <__libc_init_array>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	4d0d      	ldr	r5, [pc, #52]	; (80005d4 <__libc_init_array+0x38>)
 80005a0:	4c0d      	ldr	r4, [pc, #52]	; (80005d8 <__libc_init_array+0x3c>)
 80005a2:	1b64      	subs	r4, r4, r5
 80005a4:	10a4      	asrs	r4, r4, #2
 80005a6:	2600      	movs	r6, #0
 80005a8:	42a6      	cmp	r6, r4
 80005aa:	d109      	bne.n	80005c0 <__libc_init_array+0x24>
 80005ac:	4d0b      	ldr	r5, [pc, #44]	; (80005dc <__libc_init_array+0x40>)
 80005ae:	4c0c      	ldr	r4, [pc, #48]	; (80005e0 <__libc_init_array+0x44>)
 80005b0:	f000 fd1e 	bl	8000ff0 <_init>
 80005b4:	1b64      	subs	r4, r4, r5
 80005b6:	10a4      	asrs	r4, r4, #2
 80005b8:	2600      	movs	r6, #0
 80005ba:	42a6      	cmp	r6, r4
 80005bc:	d105      	bne.n	80005ca <__libc_init_array+0x2e>
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c4:	4798      	blx	r3
 80005c6:	3601      	adds	r6, #1
 80005c8:	e7ee      	b.n	80005a8 <__libc_init_array+0xc>
 80005ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ce:	4798      	blx	r3
 80005d0:	3601      	adds	r6, #1
 80005d2:	e7f2      	b.n	80005ba <__libc_init_array+0x1e>
 80005d4:	08001098 	.word	0x08001098
 80005d8:	08001098 	.word	0x08001098
 80005dc:	08001098 	.word	0x08001098
 80005e0:	0800109c 	.word	0x0800109c

080005e4 <memset>:
 80005e4:	4402      	add	r2, r0
 80005e6:	4603      	mov	r3, r0
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d100      	bne.n	80005ee <memset+0xa>
 80005ec:	4770      	bx	lr
 80005ee:	f803 1b01 	strb.w	r1, [r3], #1
 80005f2:	e7f9      	b.n	80005e8 <memset+0x4>

080005f4 <_puts_r>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	460e      	mov	r6, r1
 80005f8:	4605      	mov	r5, r0
 80005fa:	b118      	cbz	r0, 8000604 <_puts_r+0x10>
 80005fc:	6983      	ldr	r3, [r0, #24]
 80005fe:	b90b      	cbnz	r3, 8000604 <_puts_r+0x10>
 8000600:	f000 fa48 	bl	8000a94 <__sinit>
 8000604:	69ab      	ldr	r3, [r5, #24]
 8000606:	68ac      	ldr	r4, [r5, #8]
 8000608:	b913      	cbnz	r3, 8000610 <_puts_r+0x1c>
 800060a:	4628      	mov	r0, r5
 800060c:	f000 fa42 	bl	8000a94 <__sinit>
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <_puts_r+0xd0>)
 8000612:	429c      	cmp	r4, r3
 8000614:	d120      	bne.n	8000658 <_puts_r+0x64>
 8000616:	686c      	ldr	r4, [r5, #4]
 8000618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800061a:	07db      	lsls	r3, r3, #31
 800061c:	d405      	bmi.n	800062a <_puts_r+0x36>
 800061e:	89a3      	ldrh	r3, [r4, #12]
 8000620:	0598      	lsls	r0, r3, #22
 8000622:	d402      	bmi.n	800062a <_puts_r+0x36>
 8000624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000626:	f000 fad3 	bl	8000bd0 <__retarget_lock_acquire_recursive>
 800062a:	89a3      	ldrh	r3, [r4, #12]
 800062c:	0719      	lsls	r1, r3, #28
 800062e:	d51d      	bpl.n	800066c <_puts_r+0x78>
 8000630:	6923      	ldr	r3, [r4, #16]
 8000632:	b1db      	cbz	r3, 800066c <_puts_r+0x78>
 8000634:	3e01      	subs	r6, #1
 8000636:	68a3      	ldr	r3, [r4, #8]
 8000638:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800063c:	3b01      	subs	r3, #1
 800063e:	60a3      	str	r3, [r4, #8]
 8000640:	bb39      	cbnz	r1, 8000692 <_puts_r+0x9e>
 8000642:	2b00      	cmp	r3, #0
 8000644:	da38      	bge.n	80006b8 <_puts_r+0xc4>
 8000646:	4622      	mov	r2, r4
 8000648:	210a      	movs	r1, #10
 800064a:	4628      	mov	r0, r5
 800064c:	f000 f848 	bl	80006e0 <__swbuf_r>
 8000650:	3001      	adds	r0, #1
 8000652:	d011      	beq.n	8000678 <_puts_r+0x84>
 8000654:	250a      	movs	r5, #10
 8000656:	e011      	b.n	800067c <_puts_r+0x88>
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <_puts_r+0xd4>)
 800065a:	429c      	cmp	r4, r3
 800065c:	d101      	bne.n	8000662 <_puts_r+0x6e>
 800065e:	68ac      	ldr	r4, [r5, #8]
 8000660:	e7da      	b.n	8000618 <_puts_r+0x24>
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <_puts_r+0xd8>)
 8000664:	429c      	cmp	r4, r3
 8000666:	bf08      	it	eq
 8000668:	68ec      	ldreq	r4, [r5, #12]
 800066a:	e7d5      	b.n	8000618 <_puts_r+0x24>
 800066c:	4621      	mov	r1, r4
 800066e:	4628      	mov	r0, r5
 8000670:	f000 f888 	bl	8000784 <__swsetup_r>
 8000674:	2800      	cmp	r0, #0
 8000676:	d0dd      	beq.n	8000634 <_puts_r+0x40>
 8000678:	f04f 35ff 	mov.w	r5, #4294967295
 800067c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800067e:	07da      	lsls	r2, r3, #31
 8000680:	d405      	bmi.n	800068e <_puts_r+0x9a>
 8000682:	89a3      	ldrh	r3, [r4, #12]
 8000684:	059b      	lsls	r3, r3, #22
 8000686:	d402      	bmi.n	800068e <_puts_r+0x9a>
 8000688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800068a:	f000 faa2 	bl	8000bd2 <__retarget_lock_release_recursive>
 800068e:	4628      	mov	r0, r5
 8000690:	bd70      	pop	{r4, r5, r6, pc}
 8000692:	2b00      	cmp	r3, #0
 8000694:	da04      	bge.n	80006a0 <_puts_r+0xac>
 8000696:	69a2      	ldr	r2, [r4, #24]
 8000698:	429a      	cmp	r2, r3
 800069a:	dc06      	bgt.n	80006aa <_puts_r+0xb6>
 800069c:	290a      	cmp	r1, #10
 800069e:	d004      	beq.n	80006aa <_puts_r+0xb6>
 80006a0:	6823      	ldr	r3, [r4, #0]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	6022      	str	r2, [r4, #0]
 80006a6:	7019      	strb	r1, [r3, #0]
 80006a8:	e7c5      	b.n	8000636 <_puts_r+0x42>
 80006aa:	4622      	mov	r2, r4
 80006ac:	4628      	mov	r0, r5
 80006ae:	f000 f817 	bl	80006e0 <__swbuf_r>
 80006b2:	3001      	adds	r0, #1
 80006b4:	d1bf      	bne.n	8000636 <_puts_r+0x42>
 80006b6:	e7df      	b.n	8000678 <_puts_r+0x84>
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	250a      	movs	r5, #10
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	6022      	str	r2, [r4, #0]
 80006c0:	701d      	strb	r5, [r3, #0]
 80006c2:	e7db      	b.n	800067c <_puts_r+0x88>
 80006c4:	08001058 	.word	0x08001058
 80006c8:	08001078 	.word	0x08001078
 80006cc:	08001038 	.word	0x08001038

080006d0 <puts>:
 80006d0:	4b02      	ldr	r3, [pc, #8]	; (80006dc <puts+0xc>)
 80006d2:	4601      	mov	r1, r0
 80006d4:	6818      	ldr	r0, [r3, #0]
 80006d6:	f7ff bf8d 	b.w	80005f4 <_puts_r>
 80006da:	bf00      	nop
 80006dc:	20000004 	.word	0x20000004

080006e0 <__swbuf_r>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	460e      	mov	r6, r1
 80006e4:	4614      	mov	r4, r2
 80006e6:	4605      	mov	r5, r0
 80006e8:	b118      	cbz	r0, 80006f2 <__swbuf_r+0x12>
 80006ea:	6983      	ldr	r3, [r0, #24]
 80006ec:	b90b      	cbnz	r3, 80006f2 <__swbuf_r+0x12>
 80006ee:	f000 f9d1 	bl	8000a94 <__sinit>
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <__swbuf_r+0x98>)
 80006f4:	429c      	cmp	r4, r3
 80006f6:	d12b      	bne.n	8000750 <__swbuf_r+0x70>
 80006f8:	686c      	ldr	r4, [r5, #4]
 80006fa:	69a3      	ldr	r3, [r4, #24]
 80006fc:	60a3      	str	r3, [r4, #8]
 80006fe:	89a3      	ldrh	r3, [r4, #12]
 8000700:	071a      	lsls	r2, r3, #28
 8000702:	d52f      	bpl.n	8000764 <__swbuf_r+0x84>
 8000704:	6923      	ldr	r3, [r4, #16]
 8000706:	b36b      	cbz	r3, 8000764 <__swbuf_r+0x84>
 8000708:	6923      	ldr	r3, [r4, #16]
 800070a:	6820      	ldr	r0, [r4, #0]
 800070c:	1ac0      	subs	r0, r0, r3
 800070e:	6963      	ldr	r3, [r4, #20]
 8000710:	b2f6      	uxtb	r6, r6
 8000712:	4283      	cmp	r3, r0
 8000714:	4637      	mov	r7, r6
 8000716:	dc04      	bgt.n	8000722 <__swbuf_r+0x42>
 8000718:	4621      	mov	r1, r4
 800071a:	4628      	mov	r0, r5
 800071c:	f000 f926 	bl	800096c <_fflush_r>
 8000720:	bb30      	cbnz	r0, 8000770 <__swbuf_r+0x90>
 8000722:	68a3      	ldr	r3, [r4, #8]
 8000724:	3b01      	subs	r3, #1
 8000726:	60a3      	str	r3, [r4, #8]
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	6022      	str	r2, [r4, #0]
 800072e:	701e      	strb	r6, [r3, #0]
 8000730:	6963      	ldr	r3, [r4, #20]
 8000732:	3001      	adds	r0, #1
 8000734:	4283      	cmp	r3, r0
 8000736:	d004      	beq.n	8000742 <__swbuf_r+0x62>
 8000738:	89a3      	ldrh	r3, [r4, #12]
 800073a:	07db      	lsls	r3, r3, #31
 800073c:	d506      	bpl.n	800074c <__swbuf_r+0x6c>
 800073e:	2e0a      	cmp	r6, #10
 8000740:	d104      	bne.n	800074c <__swbuf_r+0x6c>
 8000742:	4621      	mov	r1, r4
 8000744:	4628      	mov	r0, r5
 8000746:	f000 f911 	bl	800096c <_fflush_r>
 800074a:	b988      	cbnz	r0, 8000770 <__swbuf_r+0x90>
 800074c:	4638      	mov	r0, r7
 800074e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <__swbuf_r+0x9c>)
 8000752:	429c      	cmp	r4, r3
 8000754:	d101      	bne.n	800075a <__swbuf_r+0x7a>
 8000756:	68ac      	ldr	r4, [r5, #8]
 8000758:	e7cf      	b.n	80006fa <__swbuf_r+0x1a>
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <__swbuf_r+0xa0>)
 800075c:	429c      	cmp	r4, r3
 800075e:	bf08      	it	eq
 8000760:	68ec      	ldreq	r4, [r5, #12]
 8000762:	e7ca      	b.n	80006fa <__swbuf_r+0x1a>
 8000764:	4621      	mov	r1, r4
 8000766:	4628      	mov	r0, r5
 8000768:	f000 f80c 	bl	8000784 <__swsetup_r>
 800076c:	2800      	cmp	r0, #0
 800076e:	d0cb      	beq.n	8000708 <__swbuf_r+0x28>
 8000770:	f04f 37ff 	mov.w	r7, #4294967295
 8000774:	e7ea      	b.n	800074c <__swbuf_r+0x6c>
 8000776:	bf00      	nop
 8000778:	08001058 	.word	0x08001058
 800077c:	08001078 	.word	0x08001078
 8000780:	08001038 	.word	0x08001038

08000784 <__swsetup_r>:
 8000784:	4b32      	ldr	r3, [pc, #200]	; (8000850 <__swsetup_r+0xcc>)
 8000786:	b570      	push	{r4, r5, r6, lr}
 8000788:	681d      	ldr	r5, [r3, #0]
 800078a:	4606      	mov	r6, r0
 800078c:	460c      	mov	r4, r1
 800078e:	b125      	cbz	r5, 800079a <__swsetup_r+0x16>
 8000790:	69ab      	ldr	r3, [r5, #24]
 8000792:	b913      	cbnz	r3, 800079a <__swsetup_r+0x16>
 8000794:	4628      	mov	r0, r5
 8000796:	f000 f97d 	bl	8000a94 <__sinit>
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <__swsetup_r+0xd0>)
 800079c:	429c      	cmp	r4, r3
 800079e:	d10f      	bne.n	80007c0 <__swsetup_r+0x3c>
 80007a0:	686c      	ldr	r4, [r5, #4]
 80007a2:	89a3      	ldrh	r3, [r4, #12]
 80007a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007a8:	0719      	lsls	r1, r3, #28
 80007aa:	d42c      	bmi.n	8000806 <__swsetup_r+0x82>
 80007ac:	06dd      	lsls	r5, r3, #27
 80007ae:	d411      	bmi.n	80007d4 <__swsetup_r+0x50>
 80007b0:	2309      	movs	r3, #9
 80007b2:	6033      	str	r3, [r6, #0]
 80007b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80007b8:	81a3      	strh	r3, [r4, #12]
 80007ba:	f04f 30ff 	mov.w	r0, #4294967295
 80007be:	e03e      	b.n	800083e <__swsetup_r+0xba>
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <__swsetup_r+0xd4>)
 80007c2:	429c      	cmp	r4, r3
 80007c4:	d101      	bne.n	80007ca <__swsetup_r+0x46>
 80007c6:	68ac      	ldr	r4, [r5, #8]
 80007c8:	e7eb      	b.n	80007a2 <__swsetup_r+0x1e>
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <__swsetup_r+0xd8>)
 80007cc:	429c      	cmp	r4, r3
 80007ce:	bf08      	it	eq
 80007d0:	68ec      	ldreq	r4, [r5, #12]
 80007d2:	e7e6      	b.n	80007a2 <__swsetup_r+0x1e>
 80007d4:	0758      	lsls	r0, r3, #29
 80007d6:	d512      	bpl.n	80007fe <__swsetup_r+0x7a>
 80007d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80007da:	b141      	cbz	r1, 80007ee <__swsetup_r+0x6a>
 80007dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007e0:	4299      	cmp	r1, r3
 80007e2:	d002      	beq.n	80007ea <__swsetup_r+0x66>
 80007e4:	4630      	mov	r0, r6
 80007e6:	f000 fa5b 	bl	8000ca0 <_free_r>
 80007ea:	2300      	movs	r3, #0
 80007ec:	6363      	str	r3, [r4, #52]	; 0x34
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80007f4:	81a3      	strh	r3, [r4, #12]
 80007f6:	2300      	movs	r3, #0
 80007f8:	6063      	str	r3, [r4, #4]
 80007fa:	6923      	ldr	r3, [r4, #16]
 80007fc:	6023      	str	r3, [r4, #0]
 80007fe:	89a3      	ldrh	r3, [r4, #12]
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	81a3      	strh	r3, [r4, #12]
 8000806:	6923      	ldr	r3, [r4, #16]
 8000808:	b94b      	cbnz	r3, 800081e <__swsetup_r+0x9a>
 800080a:	89a3      	ldrh	r3, [r4, #12]
 800080c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000814:	d003      	beq.n	800081e <__swsetup_r+0x9a>
 8000816:	4621      	mov	r1, r4
 8000818:	4630      	mov	r0, r6
 800081a:	f000 fa01 	bl	8000c20 <__smakebuf_r>
 800081e:	89a0      	ldrh	r0, [r4, #12]
 8000820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000824:	f010 0301 	ands.w	r3, r0, #1
 8000828:	d00a      	beq.n	8000840 <__swsetup_r+0xbc>
 800082a:	2300      	movs	r3, #0
 800082c:	60a3      	str	r3, [r4, #8]
 800082e:	6963      	ldr	r3, [r4, #20]
 8000830:	425b      	negs	r3, r3
 8000832:	61a3      	str	r3, [r4, #24]
 8000834:	6923      	ldr	r3, [r4, #16]
 8000836:	b943      	cbnz	r3, 800084a <__swsetup_r+0xc6>
 8000838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800083c:	d1ba      	bne.n	80007b4 <__swsetup_r+0x30>
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	0781      	lsls	r1, r0, #30
 8000842:	bf58      	it	pl
 8000844:	6963      	ldrpl	r3, [r4, #20]
 8000846:	60a3      	str	r3, [r4, #8]
 8000848:	e7f4      	b.n	8000834 <__swsetup_r+0xb0>
 800084a:	2000      	movs	r0, #0
 800084c:	e7f7      	b.n	800083e <__swsetup_r+0xba>
 800084e:	bf00      	nop
 8000850:	20000004 	.word	0x20000004
 8000854:	08001058 	.word	0x08001058
 8000858:	08001078 	.word	0x08001078
 800085c:	08001038 	.word	0x08001038

08000860 <__sflush_r>:
 8000860:	898a      	ldrh	r2, [r1, #12]
 8000862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000866:	4605      	mov	r5, r0
 8000868:	0710      	lsls	r0, r2, #28
 800086a:	460c      	mov	r4, r1
 800086c:	d458      	bmi.n	8000920 <__sflush_r+0xc0>
 800086e:	684b      	ldr	r3, [r1, #4]
 8000870:	2b00      	cmp	r3, #0
 8000872:	dc05      	bgt.n	8000880 <__sflush_r+0x20>
 8000874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000876:	2b00      	cmp	r3, #0
 8000878:	dc02      	bgt.n	8000880 <__sflush_r+0x20>
 800087a:	2000      	movs	r0, #0
 800087c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000882:	2e00      	cmp	r6, #0
 8000884:	d0f9      	beq.n	800087a <__sflush_r+0x1a>
 8000886:	2300      	movs	r3, #0
 8000888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800088c:	682f      	ldr	r7, [r5, #0]
 800088e:	602b      	str	r3, [r5, #0]
 8000890:	d032      	beq.n	80008f8 <__sflush_r+0x98>
 8000892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000894:	89a3      	ldrh	r3, [r4, #12]
 8000896:	075a      	lsls	r2, r3, #29
 8000898:	d505      	bpl.n	80008a6 <__sflush_r+0x46>
 800089a:	6863      	ldr	r3, [r4, #4]
 800089c:	1ac0      	subs	r0, r0, r3
 800089e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008a0:	b10b      	cbz	r3, 80008a6 <__sflush_r+0x46>
 80008a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008a4:	1ac0      	subs	r0, r0, r3
 80008a6:	2300      	movs	r3, #0
 80008a8:	4602      	mov	r2, r0
 80008aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80008ac:	6a21      	ldr	r1, [r4, #32]
 80008ae:	4628      	mov	r0, r5
 80008b0:	47b0      	blx	r6
 80008b2:	1c43      	adds	r3, r0, #1
 80008b4:	89a3      	ldrh	r3, [r4, #12]
 80008b6:	d106      	bne.n	80008c6 <__sflush_r+0x66>
 80008b8:	6829      	ldr	r1, [r5, #0]
 80008ba:	291d      	cmp	r1, #29
 80008bc:	d82c      	bhi.n	8000918 <__sflush_r+0xb8>
 80008be:	4a2a      	ldr	r2, [pc, #168]	; (8000968 <__sflush_r+0x108>)
 80008c0:	40ca      	lsrs	r2, r1
 80008c2:	07d6      	lsls	r6, r2, #31
 80008c4:	d528      	bpl.n	8000918 <__sflush_r+0xb8>
 80008c6:	2200      	movs	r2, #0
 80008c8:	6062      	str	r2, [r4, #4]
 80008ca:	04d9      	lsls	r1, r3, #19
 80008cc:	6922      	ldr	r2, [r4, #16]
 80008ce:	6022      	str	r2, [r4, #0]
 80008d0:	d504      	bpl.n	80008dc <__sflush_r+0x7c>
 80008d2:	1c42      	adds	r2, r0, #1
 80008d4:	d101      	bne.n	80008da <__sflush_r+0x7a>
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	b903      	cbnz	r3, 80008dc <__sflush_r+0x7c>
 80008da:	6560      	str	r0, [r4, #84]	; 0x54
 80008dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008de:	602f      	str	r7, [r5, #0]
 80008e0:	2900      	cmp	r1, #0
 80008e2:	d0ca      	beq.n	800087a <__sflush_r+0x1a>
 80008e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008e8:	4299      	cmp	r1, r3
 80008ea:	d002      	beq.n	80008f2 <__sflush_r+0x92>
 80008ec:	4628      	mov	r0, r5
 80008ee:	f000 f9d7 	bl	8000ca0 <_free_r>
 80008f2:	2000      	movs	r0, #0
 80008f4:	6360      	str	r0, [r4, #52]	; 0x34
 80008f6:	e7c1      	b.n	800087c <__sflush_r+0x1c>
 80008f8:	6a21      	ldr	r1, [r4, #32]
 80008fa:	2301      	movs	r3, #1
 80008fc:	4628      	mov	r0, r5
 80008fe:	47b0      	blx	r6
 8000900:	1c41      	adds	r1, r0, #1
 8000902:	d1c7      	bne.n	8000894 <__sflush_r+0x34>
 8000904:	682b      	ldr	r3, [r5, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0c4      	beq.n	8000894 <__sflush_r+0x34>
 800090a:	2b1d      	cmp	r3, #29
 800090c:	d001      	beq.n	8000912 <__sflush_r+0xb2>
 800090e:	2b16      	cmp	r3, #22
 8000910:	d101      	bne.n	8000916 <__sflush_r+0xb6>
 8000912:	602f      	str	r7, [r5, #0]
 8000914:	e7b1      	b.n	800087a <__sflush_r+0x1a>
 8000916:	89a3      	ldrh	r3, [r4, #12]
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	81a3      	strh	r3, [r4, #12]
 800091e:	e7ad      	b.n	800087c <__sflush_r+0x1c>
 8000920:	690f      	ldr	r7, [r1, #16]
 8000922:	2f00      	cmp	r7, #0
 8000924:	d0a9      	beq.n	800087a <__sflush_r+0x1a>
 8000926:	0793      	lsls	r3, r2, #30
 8000928:	680e      	ldr	r6, [r1, #0]
 800092a:	bf08      	it	eq
 800092c:	694b      	ldreq	r3, [r1, #20]
 800092e:	600f      	str	r7, [r1, #0]
 8000930:	bf18      	it	ne
 8000932:	2300      	movne	r3, #0
 8000934:	eba6 0807 	sub.w	r8, r6, r7
 8000938:	608b      	str	r3, [r1, #8]
 800093a:	f1b8 0f00 	cmp.w	r8, #0
 800093e:	dd9c      	ble.n	800087a <__sflush_r+0x1a>
 8000940:	6a21      	ldr	r1, [r4, #32]
 8000942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000944:	4643      	mov	r3, r8
 8000946:	463a      	mov	r2, r7
 8000948:	4628      	mov	r0, r5
 800094a:	47b0      	blx	r6
 800094c:	2800      	cmp	r0, #0
 800094e:	dc06      	bgt.n	800095e <__sflush_r+0xfe>
 8000950:	89a3      	ldrh	r3, [r4, #12]
 8000952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000956:	81a3      	strh	r3, [r4, #12]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	e78e      	b.n	800087c <__sflush_r+0x1c>
 800095e:	4407      	add	r7, r0
 8000960:	eba8 0800 	sub.w	r8, r8, r0
 8000964:	e7e9      	b.n	800093a <__sflush_r+0xda>
 8000966:	bf00      	nop
 8000968:	20400001 	.word	0x20400001

0800096c <_fflush_r>:
 800096c:	b538      	push	{r3, r4, r5, lr}
 800096e:	690b      	ldr	r3, [r1, #16]
 8000970:	4605      	mov	r5, r0
 8000972:	460c      	mov	r4, r1
 8000974:	b913      	cbnz	r3, 800097c <_fflush_r+0x10>
 8000976:	2500      	movs	r5, #0
 8000978:	4628      	mov	r0, r5
 800097a:	bd38      	pop	{r3, r4, r5, pc}
 800097c:	b118      	cbz	r0, 8000986 <_fflush_r+0x1a>
 800097e:	6983      	ldr	r3, [r0, #24]
 8000980:	b90b      	cbnz	r3, 8000986 <_fflush_r+0x1a>
 8000982:	f000 f887 	bl	8000a94 <__sinit>
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <_fflush_r+0x6c>)
 8000988:	429c      	cmp	r4, r3
 800098a:	d11b      	bne.n	80009c4 <_fflush_r+0x58>
 800098c:	686c      	ldr	r4, [r5, #4]
 800098e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0ef      	beq.n	8000976 <_fflush_r+0xa>
 8000996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000998:	07d0      	lsls	r0, r2, #31
 800099a:	d404      	bmi.n	80009a6 <_fflush_r+0x3a>
 800099c:	0599      	lsls	r1, r3, #22
 800099e:	d402      	bmi.n	80009a6 <_fflush_r+0x3a>
 80009a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009a2:	f000 f915 	bl	8000bd0 <__retarget_lock_acquire_recursive>
 80009a6:	4628      	mov	r0, r5
 80009a8:	4621      	mov	r1, r4
 80009aa:	f7ff ff59 	bl	8000860 <__sflush_r>
 80009ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009b0:	07da      	lsls	r2, r3, #31
 80009b2:	4605      	mov	r5, r0
 80009b4:	d4e0      	bmi.n	8000978 <_fflush_r+0xc>
 80009b6:	89a3      	ldrh	r3, [r4, #12]
 80009b8:	059b      	lsls	r3, r3, #22
 80009ba:	d4dd      	bmi.n	8000978 <_fflush_r+0xc>
 80009bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009be:	f000 f908 	bl	8000bd2 <__retarget_lock_release_recursive>
 80009c2:	e7d9      	b.n	8000978 <_fflush_r+0xc>
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <_fflush_r+0x70>)
 80009c6:	429c      	cmp	r4, r3
 80009c8:	d101      	bne.n	80009ce <_fflush_r+0x62>
 80009ca:	68ac      	ldr	r4, [r5, #8]
 80009cc:	e7df      	b.n	800098e <_fflush_r+0x22>
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <_fflush_r+0x74>)
 80009d0:	429c      	cmp	r4, r3
 80009d2:	bf08      	it	eq
 80009d4:	68ec      	ldreq	r4, [r5, #12]
 80009d6:	e7da      	b.n	800098e <_fflush_r+0x22>
 80009d8:	08001058 	.word	0x08001058
 80009dc:	08001078 	.word	0x08001078
 80009e0:	08001038 	.word	0x08001038

080009e4 <std>:
 80009e4:	2300      	movs	r3, #0
 80009e6:	b510      	push	{r4, lr}
 80009e8:	4604      	mov	r4, r0
 80009ea:	e9c0 3300 	strd	r3, r3, [r0]
 80009ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009f2:	6083      	str	r3, [r0, #8]
 80009f4:	8181      	strh	r1, [r0, #12]
 80009f6:	6643      	str	r3, [r0, #100]	; 0x64
 80009f8:	81c2      	strh	r2, [r0, #14]
 80009fa:	6183      	str	r3, [r0, #24]
 80009fc:	4619      	mov	r1, r3
 80009fe:	2208      	movs	r2, #8
 8000a00:	305c      	adds	r0, #92	; 0x5c
 8000a02:	f7ff fdef 	bl	80005e4 <memset>
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <std+0x38>)
 8000a08:	6263      	str	r3, [r4, #36]	; 0x24
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <std+0x3c>)
 8000a0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <std+0x40>)
 8000a10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <std+0x44>)
 8000a14:	6224      	str	r4, [r4, #32]
 8000a16:	6323      	str	r3, [r4, #48]	; 0x30
 8000a18:	bd10      	pop	{r4, pc}
 8000a1a:	bf00      	nop
 8000a1c:	08000e81 	.word	0x08000e81
 8000a20:	08000ea3 	.word	0x08000ea3
 8000a24:	08000edb 	.word	0x08000edb
 8000a28:	08000eff 	.word	0x08000eff

08000a2c <_cleanup_r>:
 8000a2c:	4901      	ldr	r1, [pc, #4]	; (8000a34 <_cleanup_r+0x8>)
 8000a2e:	f000 b8af 	b.w	8000b90 <_fwalk_reent>
 8000a32:	bf00      	nop
 8000a34:	0800096d 	.word	0x0800096d

08000a38 <__sfmoreglue>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	2268      	movs	r2, #104	; 0x68
 8000a3c:	1e4d      	subs	r5, r1, #1
 8000a3e:	4355      	muls	r5, r2
 8000a40:	460e      	mov	r6, r1
 8000a42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000a46:	f000 f997 	bl	8000d78 <_malloc_r>
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	b140      	cbz	r0, 8000a60 <__sfmoreglue+0x28>
 8000a4e:	2100      	movs	r1, #0
 8000a50:	e9c0 1600 	strd	r1, r6, [r0]
 8000a54:	300c      	adds	r0, #12
 8000a56:	60a0      	str	r0, [r4, #8]
 8000a58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000a5c:	f7ff fdc2 	bl	80005e4 <memset>
 8000a60:	4620      	mov	r0, r4
 8000a62:	bd70      	pop	{r4, r5, r6, pc}

08000a64 <__sfp_lock_acquire>:
 8000a64:	4801      	ldr	r0, [pc, #4]	; (8000a6c <__sfp_lock_acquire+0x8>)
 8000a66:	f000 b8b3 	b.w	8000bd0 <__retarget_lock_acquire_recursive>
 8000a6a:	bf00      	nop
 8000a6c:	2000008d 	.word	0x2000008d

08000a70 <__sfp_lock_release>:
 8000a70:	4801      	ldr	r0, [pc, #4]	; (8000a78 <__sfp_lock_release+0x8>)
 8000a72:	f000 b8ae 	b.w	8000bd2 <__retarget_lock_release_recursive>
 8000a76:	bf00      	nop
 8000a78:	2000008d 	.word	0x2000008d

08000a7c <__sinit_lock_acquire>:
 8000a7c:	4801      	ldr	r0, [pc, #4]	; (8000a84 <__sinit_lock_acquire+0x8>)
 8000a7e:	f000 b8a7 	b.w	8000bd0 <__retarget_lock_acquire_recursive>
 8000a82:	bf00      	nop
 8000a84:	2000008e 	.word	0x2000008e

08000a88 <__sinit_lock_release>:
 8000a88:	4801      	ldr	r0, [pc, #4]	; (8000a90 <__sinit_lock_release+0x8>)
 8000a8a:	f000 b8a2 	b.w	8000bd2 <__retarget_lock_release_recursive>
 8000a8e:	bf00      	nop
 8000a90:	2000008e 	.word	0x2000008e

08000a94 <__sinit>:
 8000a94:	b510      	push	{r4, lr}
 8000a96:	4604      	mov	r4, r0
 8000a98:	f7ff fff0 	bl	8000a7c <__sinit_lock_acquire>
 8000a9c:	69a3      	ldr	r3, [r4, #24]
 8000a9e:	b11b      	cbz	r3, 8000aa8 <__sinit+0x14>
 8000aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa4:	f7ff bff0 	b.w	8000a88 <__sinit_lock_release>
 8000aa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000aac:	6523      	str	r3, [r4, #80]	; 0x50
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <__sinit+0x68>)
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <__sinit+0x6c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	bf04      	itt	eq
 8000aba:	2301      	moveq	r3, #1
 8000abc:	61a3      	streq	r3, [r4, #24]
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f000 f820 	bl	8000b04 <__sfp>
 8000ac4:	6060      	str	r0, [r4, #4]
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f000 f81c 	bl	8000b04 <__sfp>
 8000acc:	60a0      	str	r0, [r4, #8]
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f000 f818 	bl	8000b04 <__sfp>
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60e0      	str	r0, [r4, #12]
 8000ad8:	2104      	movs	r1, #4
 8000ada:	6860      	ldr	r0, [r4, #4]
 8000adc:	f7ff ff82 	bl	80009e4 <std>
 8000ae0:	68a0      	ldr	r0, [r4, #8]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2109      	movs	r1, #9
 8000ae6:	f7ff ff7d 	bl	80009e4 <std>
 8000aea:	68e0      	ldr	r0, [r4, #12]
 8000aec:	2202      	movs	r2, #2
 8000aee:	2112      	movs	r1, #18
 8000af0:	f7ff ff78 	bl	80009e4 <std>
 8000af4:	2301      	movs	r3, #1
 8000af6:	61a3      	str	r3, [r4, #24]
 8000af8:	e7d2      	b.n	8000aa0 <__sinit+0xc>
 8000afa:	bf00      	nop
 8000afc:	08001034 	.word	0x08001034
 8000b00:	08000a2d 	.word	0x08000a2d

08000b04 <__sfp>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	4607      	mov	r7, r0
 8000b08:	f7ff ffac 	bl	8000a64 <__sfp_lock_acquire>
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <__sfp+0x84>)
 8000b0e:	681e      	ldr	r6, [r3, #0]
 8000b10:	69b3      	ldr	r3, [r6, #24]
 8000b12:	b913      	cbnz	r3, 8000b1a <__sfp+0x16>
 8000b14:	4630      	mov	r0, r6
 8000b16:	f7ff ffbd 	bl	8000a94 <__sinit>
 8000b1a:	3648      	adds	r6, #72	; 0x48
 8000b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	d503      	bpl.n	8000b2c <__sfp+0x28>
 8000b24:	6833      	ldr	r3, [r6, #0]
 8000b26:	b30b      	cbz	r3, 8000b6c <__sfp+0x68>
 8000b28:	6836      	ldr	r6, [r6, #0]
 8000b2a:	e7f7      	b.n	8000b1c <__sfp+0x18>
 8000b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b30:	b9d5      	cbnz	r5, 8000b68 <__sfp+0x64>
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <__sfp+0x88>)
 8000b34:	60e3      	str	r3, [r4, #12]
 8000b36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b3a:	6665      	str	r5, [r4, #100]	; 0x64
 8000b3c:	f000 f847 	bl	8000bce <__retarget_lock_init_recursive>
 8000b40:	f7ff ff96 	bl	8000a70 <__sfp_lock_release>
 8000b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000b4c:	6025      	str	r5, [r4, #0]
 8000b4e:	61a5      	str	r5, [r4, #24]
 8000b50:	2208      	movs	r2, #8
 8000b52:	4629      	mov	r1, r5
 8000b54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000b58:	f7ff fd44 	bl	80005e4 <memset>
 8000b5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000b60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000b64:	4620      	mov	r0, r4
 8000b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b68:	3468      	adds	r4, #104	; 0x68
 8000b6a:	e7d9      	b.n	8000b20 <__sfp+0x1c>
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4638      	mov	r0, r7
 8000b70:	f7ff ff62 	bl	8000a38 <__sfmoreglue>
 8000b74:	4604      	mov	r4, r0
 8000b76:	6030      	str	r0, [r6, #0]
 8000b78:	2800      	cmp	r0, #0
 8000b7a:	d1d5      	bne.n	8000b28 <__sfp+0x24>
 8000b7c:	f7ff ff78 	bl	8000a70 <__sfp_lock_release>
 8000b80:	230c      	movs	r3, #12
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	e7ee      	b.n	8000b64 <__sfp+0x60>
 8000b86:	bf00      	nop
 8000b88:	08001034 	.word	0x08001034
 8000b8c:	ffff0001 	.word	0xffff0001

08000b90 <_fwalk_reent>:
 8000b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b94:	4606      	mov	r6, r0
 8000b96:	4688      	mov	r8, r1
 8000b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ba2:	f1b9 0901 	subs.w	r9, r9, #1
 8000ba6:	d505      	bpl.n	8000bb4 <_fwalk_reent+0x24>
 8000ba8:	6824      	ldr	r4, [r4, #0]
 8000baa:	2c00      	cmp	r4, #0
 8000bac:	d1f7      	bne.n	8000b9e <_fwalk_reent+0xe>
 8000bae:	4638      	mov	r0, r7
 8000bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bb4:	89ab      	ldrh	r3, [r5, #12]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d907      	bls.n	8000bca <_fwalk_reent+0x3a>
 8000bba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	d003      	beq.n	8000bca <_fwalk_reent+0x3a>
 8000bc2:	4629      	mov	r1, r5
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	47c0      	blx	r8
 8000bc8:	4307      	orrs	r7, r0
 8000bca:	3568      	adds	r5, #104	; 0x68
 8000bcc:	e7e9      	b.n	8000ba2 <_fwalk_reent+0x12>

08000bce <__retarget_lock_init_recursive>:
 8000bce:	4770      	bx	lr

08000bd0 <__retarget_lock_acquire_recursive>:
 8000bd0:	4770      	bx	lr

08000bd2 <__retarget_lock_release_recursive>:
 8000bd2:	4770      	bx	lr

08000bd4 <__swhatbuf_r>:
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	460e      	mov	r6, r1
 8000bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	b096      	sub	sp, #88	; 0x58
 8000be0:	4614      	mov	r4, r2
 8000be2:	461d      	mov	r5, r3
 8000be4:	da08      	bge.n	8000bf8 <__swhatbuf_r+0x24>
 8000be6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000bea:	2200      	movs	r2, #0
 8000bec:	602a      	str	r2, [r5, #0]
 8000bee:	061a      	lsls	r2, r3, #24
 8000bf0:	d410      	bmi.n	8000c14 <__swhatbuf_r+0x40>
 8000bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf6:	e00e      	b.n	8000c16 <__swhatbuf_r+0x42>
 8000bf8:	466a      	mov	r2, sp
 8000bfa:	f000 f9a7 	bl	8000f4c <_fstat_r>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	dbf1      	blt.n	8000be6 <__swhatbuf_r+0x12>
 8000c02:	9a01      	ldr	r2, [sp, #4]
 8000c04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c0c:	425a      	negs	r2, r3
 8000c0e:	415a      	adcs	r2, r3
 8000c10:	602a      	str	r2, [r5, #0]
 8000c12:	e7ee      	b.n	8000bf2 <__swhatbuf_r+0x1e>
 8000c14:	2340      	movs	r3, #64	; 0x40
 8000c16:	2000      	movs	r0, #0
 8000c18:	6023      	str	r3, [r4, #0]
 8000c1a:	b016      	add	sp, #88	; 0x58
 8000c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c20 <__smakebuf_r>:
 8000c20:	898b      	ldrh	r3, [r1, #12]
 8000c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c24:	079d      	lsls	r5, r3, #30
 8000c26:	4606      	mov	r6, r0
 8000c28:	460c      	mov	r4, r1
 8000c2a:	d507      	bpl.n	8000c3c <__smakebuf_r+0x1c>
 8000c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c30:	6023      	str	r3, [r4, #0]
 8000c32:	6123      	str	r3, [r4, #16]
 8000c34:	2301      	movs	r3, #1
 8000c36:	6163      	str	r3, [r4, #20]
 8000c38:	b002      	add	sp, #8
 8000c3a:	bd70      	pop	{r4, r5, r6, pc}
 8000c3c:	ab01      	add	r3, sp, #4
 8000c3e:	466a      	mov	r2, sp
 8000c40:	f7ff ffc8 	bl	8000bd4 <__swhatbuf_r>
 8000c44:	9900      	ldr	r1, [sp, #0]
 8000c46:	4605      	mov	r5, r0
 8000c48:	4630      	mov	r0, r6
 8000c4a:	f000 f895 	bl	8000d78 <_malloc_r>
 8000c4e:	b948      	cbnz	r0, 8000c64 <__smakebuf_r+0x44>
 8000c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c54:	059a      	lsls	r2, r3, #22
 8000c56:	d4ef      	bmi.n	8000c38 <__smakebuf_r+0x18>
 8000c58:	f023 0303 	bic.w	r3, r3, #3
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	81a3      	strh	r3, [r4, #12]
 8000c62:	e7e3      	b.n	8000c2c <__smakebuf_r+0xc>
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <__smakebuf_r+0x7c>)
 8000c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c68:	89a3      	ldrh	r3, [r4, #12]
 8000c6a:	6020      	str	r0, [r4, #0]
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c70:	81a3      	strh	r3, [r4, #12]
 8000c72:	9b00      	ldr	r3, [sp, #0]
 8000c74:	6163      	str	r3, [r4, #20]
 8000c76:	9b01      	ldr	r3, [sp, #4]
 8000c78:	6120      	str	r0, [r4, #16]
 8000c7a:	b15b      	cbz	r3, 8000c94 <__smakebuf_r+0x74>
 8000c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c80:	4630      	mov	r0, r6
 8000c82:	f000 f975 	bl	8000f70 <_isatty_r>
 8000c86:	b128      	cbz	r0, 8000c94 <__smakebuf_r+0x74>
 8000c88:	89a3      	ldrh	r3, [r4, #12]
 8000c8a:	f023 0303 	bic.w	r3, r3, #3
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	81a3      	strh	r3, [r4, #12]
 8000c94:	89a0      	ldrh	r0, [r4, #12]
 8000c96:	4305      	orrs	r5, r0
 8000c98:	81a5      	strh	r5, [r4, #12]
 8000c9a:	e7cd      	b.n	8000c38 <__smakebuf_r+0x18>
 8000c9c:	08000a2d 	.word	0x08000a2d

08000ca0 <_free_r>:
 8000ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d044      	beq.n	8000d30 <_free_r+0x90>
 8000ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000caa:	9001      	str	r0, [sp, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f1a1 0404 	sub.w	r4, r1, #4
 8000cb2:	bfb8      	it	lt
 8000cb4:	18e4      	addlt	r4, r4, r3
 8000cb6:	f000 f97d 	bl	8000fb4 <__malloc_lock>
 8000cba:	4a1e      	ldr	r2, [pc, #120]	; (8000d34 <_free_r+0x94>)
 8000cbc:	9801      	ldr	r0, [sp, #4]
 8000cbe:	6813      	ldr	r3, [r2, #0]
 8000cc0:	b933      	cbnz	r3, 8000cd0 <_free_r+0x30>
 8000cc2:	6063      	str	r3, [r4, #4]
 8000cc4:	6014      	str	r4, [r2, #0]
 8000cc6:	b003      	add	sp, #12
 8000cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ccc:	f000 b978 	b.w	8000fc0 <__malloc_unlock>
 8000cd0:	42a3      	cmp	r3, r4
 8000cd2:	d908      	bls.n	8000ce6 <_free_r+0x46>
 8000cd4:	6825      	ldr	r5, [r4, #0]
 8000cd6:	1961      	adds	r1, r4, r5
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	bf01      	itttt	eq
 8000cdc:	6819      	ldreq	r1, [r3, #0]
 8000cde:	685b      	ldreq	r3, [r3, #4]
 8000ce0:	1949      	addeq	r1, r1, r5
 8000ce2:	6021      	streq	r1, [r4, #0]
 8000ce4:	e7ed      	b.n	8000cc2 <_free_r+0x22>
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	b10b      	cbz	r3, 8000cf0 <_free_r+0x50>
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d9fa      	bls.n	8000ce6 <_free_r+0x46>
 8000cf0:	6811      	ldr	r1, [r2, #0]
 8000cf2:	1855      	adds	r5, r2, r1
 8000cf4:	42a5      	cmp	r5, r4
 8000cf6:	d10b      	bne.n	8000d10 <_free_r+0x70>
 8000cf8:	6824      	ldr	r4, [r4, #0]
 8000cfa:	4421      	add	r1, r4
 8000cfc:	1854      	adds	r4, r2, r1
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	6011      	str	r1, [r2, #0]
 8000d02:	d1e0      	bne.n	8000cc6 <_free_r+0x26>
 8000d04:	681c      	ldr	r4, [r3, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	6053      	str	r3, [r2, #4]
 8000d0a:	4421      	add	r1, r4
 8000d0c:	6011      	str	r1, [r2, #0]
 8000d0e:	e7da      	b.n	8000cc6 <_free_r+0x26>
 8000d10:	d902      	bls.n	8000d18 <_free_r+0x78>
 8000d12:	230c      	movs	r3, #12
 8000d14:	6003      	str	r3, [r0, #0]
 8000d16:	e7d6      	b.n	8000cc6 <_free_r+0x26>
 8000d18:	6825      	ldr	r5, [r4, #0]
 8000d1a:	1961      	adds	r1, r4, r5
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	bf04      	itt	eq
 8000d20:	6819      	ldreq	r1, [r3, #0]
 8000d22:	685b      	ldreq	r3, [r3, #4]
 8000d24:	6063      	str	r3, [r4, #4]
 8000d26:	bf04      	itt	eq
 8000d28:	1949      	addeq	r1, r1, r5
 8000d2a:	6021      	streq	r1, [r4, #0]
 8000d2c:	6054      	str	r4, [r2, #4]
 8000d2e:	e7ca      	b.n	8000cc6 <_free_r+0x26>
 8000d30:	b003      	add	sp, #12
 8000d32:	bd30      	pop	{r4, r5, pc}
 8000d34:	20000090 	.word	0x20000090

08000d38 <sbrk_aligned>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	4e0e      	ldr	r6, [pc, #56]	; (8000d74 <sbrk_aligned+0x3c>)
 8000d3c:	460c      	mov	r4, r1
 8000d3e:	6831      	ldr	r1, [r6, #0]
 8000d40:	4605      	mov	r5, r0
 8000d42:	b911      	cbnz	r1, 8000d4a <sbrk_aligned+0x12>
 8000d44:	f000 f88c 	bl	8000e60 <_sbrk_r>
 8000d48:	6030      	str	r0, [r6, #0]
 8000d4a:	4621      	mov	r1, r4
 8000d4c:	4628      	mov	r0, r5
 8000d4e:	f000 f887 	bl	8000e60 <_sbrk_r>
 8000d52:	1c43      	adds	r3, r0, #1
 8000d54:	d00a      	beq.n	8000d6c <sbrk_aligned+0x34>
 8000d56:	1cc4      	adds	r4, r0, #3
 8000d58:	f024 0403 	bic.w	r4, r4, #3
 8000d5c:	42a0      	cmp	r0, r4
 8000d5e:	d007      	beq.n	8000d70 <sbrk_aligned+0x38>
 8000d60:	1a21      	subs	r1, r4, r0
 8000d62:	4628      	mov	r0, r5
 8000d64:	f000 f87c 	bl	8000e60 <_sbrk_r>
 8000d68:	3001      	adds	r0, #1
 8000d6a:	d101      	bne.n	8000d70 <sbrk_aligned+0x38>
 8000d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8000d70:	4620      	mov	r0, r4
 8000d72:	bd70      	pop	{r4, r5, r6, pc}
 8000d74:	20000094 	.word	0x20000094

08000d78 <_malloc_r>:
 8000d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7c:	1ccd      	adds	r5, r1, #3
 8000d7e:	f025 0503 	bic.w	r5, r5, #3
 8000d82:	3508      	adds	r5, #8
 8000d84:	2d0c      	cmp	r5, #12
 8000d86:	bf38      	it	cc
 8000d88:	250c      	movcc	r5, #12
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	4607      	mov	r7, r0
 8000d8e:	db01      	blt.n	8000d94 <_malloc_r+0x1c>
 8000d90:	42a9      	cmp	r1, r5
 8000d92:	d905      	bls.n	8000da0 <_malloc_r+0x28>
 8000d94:	230c      	movs	r3, #12
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	2600      	movs	r6, #0
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000da0:	4e2e      	ldr	r6, [pc, #184]	; (8000e5c <_malloc_r+0xe4>)
 8000da2:	f000 f907 	bl	8000fb4 <__malloc_lock>
 8000da6:	6833      	ldr	r3, [r6, #0]
 8000da8:	461c      	mov	r4, r3
 8000daa:	bb34      	cbnz	r4, 8000dfa <_malloc_r+0x82>
 8000dac:	4629      	mov	r1, r5
 8000dae:	4638      	mov	r0, r7
 8000db0:	f7ff ffc2 	bl	8000d38 <sbrk_aligned>
 8000db4:	1c43      	adds	r3, r0, #1
 8000db6:	4604      	mov	r4, r0
 8000db8:	d14d      	bne.n	8000e56 <_malloc_r+0xde>
 8000dba:	6834      	ldr	r4, [r6, #0]
 8000dbc:	4626      	mov	r6, r4
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d140      	bne.n	8000e44 <_malloc_r+0xcc>
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	4638      	mov	r0, r7
 8000dc8:	eb04 0803 	add.w	r8, r4, r3
 8000dcc:	f000 f848 	bl	8000e60 <_sbrk_r>
 8000dd0:	4580      	cmp	r8, r0
 8000dd2:	d13a      	bne.n	8000e4a <_malloc_r+0xd2>
 8000dd4:	6821      	ldr	r1, [r4, #0]
 8000dd6:	3503      	adds	r5, #3
 8000dd8:	1a6d      	subs	r5, r5, r1
 8000dda:	f025 0503 	bic.w	r5, r5, #3
 8000dde:	3508      	adds	r5, #8
 8000de0:	2d0c      	cmp	r5, #12
 8000de2:	bf38      	it	cc
 8000de4:	250c      	movcc	r5, #12
 8000de6:	4629      	mov	r1, r5
 8000de8:	4638      	mov	r0, r7
 8000dea:	f7ff ffa5 	bl	8000d38 <sbrk_aligned>
 8000dee:	3001      	adds	r0, #1
 8000df0:	d02b      	beq.n	8000e4a <_malloc_r+0xd2>
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	442b      	add	r3, r5
 8000df6:	6023      	str	r3, [r4, #0]
 8000df8:	e00e      	b.n	8000e18 <_malloc_r+0xa0>
 8000dfa:	6822      	ldr	r2, [r4, #0]
 8000dfc:	1b52      	subs	r2, r2, r5
 8000dfe:	d41e      	bmi.n	8000e3e <_malloc_r+0xc6>
 8000e00:	2a0b      	cmp	r2, #11
 8000e02:	d916      	bls.n	8000e32 <_malloc_r+0xba>
 8000e04:	1961      	adds	r1, r4, r5
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	6025      	str	r5, [r4, #0]
 8000e0a:	bf18      	it	ne
 8000e0c:	6059      	strne	r1, [r3, #4]
 8000e0e:	6863      	ldr	r3, [r4, #4]
 8000e10:	bf08      	it	eq
 8000e12:	6031      	streq	r1, [r6, #0]
 8000e14:	5162      	str	r2, [r4, r5]
 8000e16:	604b      	str	r3, [r1, #4]
 8000e18:	4638      	mov	r0, r7
 8000e1a:	f104 060b 	add.w	r6, r4, #11
 8000e1e:	f000 f8cf 	bl	8000fc0 <__malloc_unlock>
 8000e22:	f026 0607 	bic.w	r6, r6, #7
 8000e26:	1d23      	adds	r3, r4, #4
 8000e28:	1af2      	subs	r2, r6, r3
 8000e2a:	d0b6      	beq.n	8000d9a <_malloc_r+0x22>
 8000e2c:	1b9b      	subs	r3, r3, r6
 8000e2e:	50a3      	str	r3, [r4, r2]
 8000e30:	e7b3      	b.n	8000d9a <_malloc_r+0x22>
 8000e32:	6862      	ldr	r2, [r4, #4]
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	bf0c      	ite	eq
 8000e38:	6032      	streq	r2, [r6, #0]
 8000e3a:	605a      	strne	r2, [r3, #4]
 8000e3c:	e7ec      	b.n	8000e18 <_malloc_r+0xa0>
 8000e3e:	4623      	mov	r3, r4
 8000e40:	6864      	ldr	r4, [r4, #4]
 8000e42:	e7b2      	b.n	8000daa <_malloc_r+0x32>
 8000e44:	4634      	mov	r4, r6
 8000e46:	6876      	ldr	r6, [r6, #4]
 8000e48:	e7b9      	b.n	8000dbe <_malloc_r+0x46>
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	603b      	str	r3, [r7, #0]
 8000e4e:	4638      	mov	r0, r7
 8000e50:	f000 f8b6 	bl	8000fc0 <__malloc_unlock>
 8000e54:	e7a1      	b.n	8000d9a <_malloc_r+0x22>
 8000e56:	6025      	str	r5, [r4, #0]
 8000e58:	e7de      	b.n	8000e18 <_malloc_r+0xa0>
 8000e5a:	bf00      	nop
 8000e5c:	20000090 	.word	0x20000090

08000e60 <_sbrk_r>:
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4d06      	ldr	r5, [pc, #24]	; (8000e7c <_sbrk_r+0x1c>)
 8000e64:	2300      	movs	r3, #0
 8000e66:	4604      	mov	r4, r0
 8000e68:	4608      	mov	r0, r1
 8000e6a:	602b      	str	r3, [r5, #0]
 8000e6c:	f7ff fad0 	bl	8000410 <_sbrk>
 8000e70:	1c43      	adds	r3, r0, #1
 8000e72:	d102      	bne.n	8000e7a <_sbrk_r+0x1a>
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	b103      	cbz	r3, 8000e7a <_sbrk_r+0x1a>
 8000e78:	6023      	str	r3, [r4, #0]
 8000e7a:	bd38      	pop	{r3, r4, r5, pc}
 8000e7c:	20000098 	.word	0x20000098

08000e80 <__sread>:
 8000e80:	b510      	push	{r4, lr}
 8000e82:	460c      	mov	r4, r1
 8000e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e88:	f000 f8a0 	bl	8000fcc <_read_r>
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	bfab      	itete	ge
 8000e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e92:	89a3      	ldrhlt	r3, [r4, #12]
 8000e94:	181b      	addge	r3, r3, r0
 8000e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e9a:	bfac      	ite	ge
 8000e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e9e:	81a3      	strhlt	r3, [r4, #12]
 8000ea0:	bd10      	pop	{r4, pc}

08000ea2 <__swrite>:
 8000ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ea6:	461f      	mov	r7, r3
 8000ea8:	898b      	ldrh	r3, [r1, #12]
 8000eaa:	05db      	lsls	r3, r3, #23
 8000eac:	4605      	mov	r5, r0
 8000eae:	460c      	mov	r4, r1
 8000eb0:	4616      	mov	r6, r2
 8000eb2:	d505      	bpl.n	8000ec0 <__swrite+0x1e>
 8000eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000eb8:	2302      	movs	r3, #2
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f000 f868 	bl	8000f90 <_lseek_r>
 8000ec0:	89a3      	ldrh	r3, [r4, #12]
 8000ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eca:	81a3      	strh	r3, [r4, #12]
 8000ecc:	4632      	mov	r2, r6
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed6:	f000 b817 	b.w	8000f08 <_write_r>

08000eda <__sseek>:
 8000eda:	b510      	push	{r4, lr}
 8000edc:	460c      	mov	r4, r1
 8000ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ee2:	f000 f855 	bl	8000f90 <_lseek_r>
 8000ee6:	1c43      	adds	r3, r0, #1
 8000ee8:	89a3      	ldrh	r3, [r4, #12]
 8000eea:	bf15      	itete	ne
 8000eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8000eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ef6:	81a3      	strheq	r3, [r4, #12]
 8000ef8:	bf18      	it	ne
 8000efa:	81a3      	strhne	r3, [r4, #12]
 8000efc:	bd10      	pop	{r4, pc}

08000efe <__sclose>:
 8000efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f02:	f000 b813 	b.w	8000f2c <_close_r>
	...

08000f08 <_write_r>:
 8000f08:	b538      	push	{r3, r4, r5, lr}
 8000f0a:	4d07      	ldr	r5, [pc, #28]	; (8000f28 <_write_r+0x20>)
 8000f0c:	4604      	mov	r4, r0
 8000f0e:	4608      	mov	r0, r1
 8000f10:	4611      	mov	r1, r2
 8000f12:	2200      	movs	r2, #0
 8000f14:	602a      	str	r2, [r5, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	f7ff fa29 	bl	800036e <_write>
 8000f1c:	1c43      	adds	r3, r0, #1
 8000f1e:	d102      	bne.n	8000f26 <_write_r+0x1e>
 8000f20:	682b      	ldr	r3, [r5, #0]
 8000f22:	b103      	cbz	r3, 8000f26 <_write_r+0x1e>
 8000f24:	6023      	str	r3, [r4, #0]
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
 8000f28:	20000098 	.word	0x20000098

08000f2c <_close_r>:
 8000f2c:	b538      	push	{r3, r4, r5, lr}
 8000f2e:	4d06      	ldr	r5, [pc, #24]	; (8000f48 <_close_r+0x1c>)
 8000f30:	2300      	movs	r3, #0
 8000f32:	4604      	mov	r4, r0
 8000f34:	4608      	mov	r0, r1
 8000f36:	602b      	str	r3, [r5, #0]
 8000f38:	f7ff fa35 	bl	80003a6 <_close>
 8000f3c:	1c43      	adds	r3, r0, #1
 8000f3e:	d102      	bne.n	8000f46 <_close_r+0x1a>
 8000f40:	682b      	ldr	r3, [r5, #0]
 8000f42:	b103      	cbz	r3, 8000f46 <_close_r+0x1a>
 8000f44:	6023      	str	r3, [r4, #0]
 8000f46:	bd38      	pop	{r3, r4, r5, pc}
 8000f48:	20000098 	.word	0x20000098

08000f4c <_fstat_r>:
 8000f4c:	b538      	push	{r3, r4, r5, lr}
 8000f4e:	4d07      	ldr	r5, [pc, #28]	; (8000f6c <_fstat_r+0x20>)
 8000f50:	2300      	movs	r3, #0
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	4611      	mov	r1, r2
 8000f58:	602b      	str	r3, [r5, #0]
 8000f5a:	f7ff fa30 	bl	80003be <_fstat>
 8000f5e:	1c43      	adds	r3, r0, #1
 8000f60:	d102      	bne.n	8000f68 <_fstat_r+0x1c>
 8000f62:	682b      	ldr	r3, [r5, #0]
 8000f64:	b103      	cbz	r3, 8000f68 <_fstat_r+0x1c>
 8000f66:	6023      	str	r3, [r4, #0]
 8000f68:	bd38      	pop	{r3, r4, r5, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000098 	.word	0x20000098

08000f70 <_isatty_r>:
 8000f70:	b538      	push	{r3, r4, r5, lr}
 8000f72:	4d06      	ldr	r5, [pc, #24]	; (8000f8c <_isatty_r+0x1c>)
 8000f74:	2300      	movs	r3, #0
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	602b      	str	r3, [r5, #0]
 8000f7c:	f7ff fa2f 	bl	80003de <_isatty>
 8000f80:	1c43      	adds	r3, r0, #1
 8000f82:	d102      	bne.n	8000f8a <_isatty_r+0x1a>
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	b103      	cbz	r3, 8000f8a <_isatty_r+0x1a>
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	bd38      	pop	{r3, r4, r5, pc}
 8000f8c:	20000098 	.word	0x20000098

08000f90 <_lseek_r>:
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	4d07      	ldr	r5, [pc, #28]	; (8000fb0 <_lseek_r+0x20>)
 8000f94:	4604      	mov	r4, r0
 8000f96:	4608      	mov	r0, r1
 8000f98:	4611      	mov	r1, r2
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	602a      	str	r2, [r5, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	f7ff fa28 	bl	80003f4 <_lseek>
 8000fa4:	1c43      	adds	r3, r0, #1
 8000fa6:	d102      	bne.n	8000fae <_lseek_r+0x1e>
 8000fa8:	682b      	ldr	r3, [r5, #0]
 8000faa:	b103      	cbz	r3, 8000fae <_lseek_r+0x1e>
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	bd38      	pop	{r3, r4, r5, pc}
 8000fb0:	20000098 	.word	0x20000098

08000fb4 <__malloc_lock>:
 8000fb4:	4801      	ldr	r0, [pc, #4]	; (8000fbc <__malloc_lock+0x8>)
 8000fb6:	f7ff be0b 	b.w	8000bd0 <__retarget_lock_acquire_recursive>
 8000fba:	bf00      	nop
 8000fbc:	2000008c 	.word	0x2000008c

08000fc0 <__malloc_unlock>:
 8000fc0:	4801      	ldr	r0, [pc, #4]	; (8000fc8 <__malloc_unlock+0x8>)
 8000fc2:	f7ff be06 	b.w	8000bd2 <__retarget_lock_release_recursive>
 8000fc6:	bf00      	nop
 8000fc8:	2000008c 	.word	0x2000008c

08000fcc <_read_r>:
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4d07      	ldr	r5, [pc, #28]	; (8000fec <_read_r+0x20>)
 8000fd0:	4604      	mov	r4, r0
 8000fd2:	4608      	mov	r0, r1
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	602a      	str	r2, [r5, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f7ff f9aa 	bl	8000334 <_read>
 8000fe0:	1c43      	adds	r3, r0, #1
 8000fe2:	d102      	bne.n	8000fea <_read_r+0x1e>
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	b103      	cbz	r3, 8000fea <_read_r+0x1e>
 8000fe8:	6023      	str	r3, [r4, #0]
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000098 	.word	0x20000098

08000ff0 <_init>:
 8000ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff2:	bf00      	nop
 8000ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff6:	bc08      	pop	{r3}
 8000ff8:	469e      	mov	lr, r3
 8000ffa:	4770      	bx	lr

08000ffc <_fini>:
 8000ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffe:	bf00      	nop
 8001000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001002:	bc08      	pop	{r3}
 8001004:	469e      	mov	lr, r3
 8001006:	4770      	bx	lr
